{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","factory","getSha512","data","shaObj","jsSHA","update","getHash","getHmac","key","setHMACKey","getHMAC","$http","$cryptoService","$q","apiUrl","Login","userObject","dataObject","promise","defer","username","password","post","then","status","token","resolve","guid","role","reject","message","loggedIn","ForgotPassword","error","GetUser","get","GetAllConferences","GetAllConferencesForAllUsers","GetUnconfirmedCount","GetUnconfirmedConferences","GetConference","dataIn","conferenceGuid","Logout","statusCode","GetStates","country","CreateConference","confUserObject","registration","CreateUser","hash","UpdateConference","put","ConfirmConference","isConfirmed","UnconfirmConference","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","JSON","parse","_ref","school_name","teacher_escort","dbData","allConferences","map","conference","areFormsFilled","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","isProcessing","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","err","red","go","_this2","showLogout","remove","_this3","dat","shouldAddNewButton","count","dataPromise","dataOut","console","log","hasConferences","length","conferences","$stateParams","_this4","AddDelegate","conferenceData","delegates","isMessage","messageHeader","yellow","name","UpdateForm","processing","AddGADelegate","dataDb","isConferenceConfirmed","_this5","isAllDone","$restApi","_this6","self","Execute","resultPromise","user","dataForgot","dataError","dataLogin","stringify","_this7","countries","code","populateStateList","states","cancel","NewConference","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","isError","errorMessage","$crypto","_this8","NewUser","_this9","_","_this10","_this11","medicalHistory","_this12","_this13","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"AAAA,YAAAA,SACKC,OAAQ,OACL,YACA,YACA,aAGRD,QACKC,OAAQ,OAEbD,QAAQC,OAAQ,OACRC,QAAU,qBAAsB,iBAAkB,SAAEC,EAAoBC,GAErED,EAAmBE,UAAW,KAE9BD,EACKE,MAAO,QAEJC,IAAK,IACLC,YAAa,gCAGhBF,MAAO,UAEJC,IAAK,UACLC,YAAa,uCAGhBF,MAAO,aAEJC,IAAK,aACLC,YAAa,iCAGhBF,MAAO,iBAEJC,IAAK,mBACLC,YAAa,sCAGhBF,MAAO,kBAEJC,IAAK,qBACLC,YAAa,uCAGhBF,MAAO,oBAEJC,IAAK,kCACLC,YAAa,0CAGhBF,MAAO,2BAEJC,IAAK,+BACLC,YAAa,kDAGhBF,MAAO,0BAEJC,IAAK,4BACLC,YAAa,iDAGhBF,MAAO,gBAEJC,IAAK,wBACLC,YAAa,uCAGhBF,MAAO,kBAEJC,IAAK,mBACLC,YAAa,uCAGhBF,MAAO,uBAEJC,IAAK,oCACLC,YAAa,6CAGhBF,MAAO,cAEJC,IAAK,uBACLC,YAAa,mCAMhCR,QACKC,OAAQ,OACRQ,QAAS,iBAAmB,WAEzB,OAEIC,UAAW,SAAUC,GAEjB,GAAIC,GAAS,GAAIC,OAAO,UAAW,OAEnC,OADAD,GAAOE,OAAQH,GACRC,EAAOG,QAAS,QAI3BC,QAAS,SAAUL,EAAMM,GAErB,GAAIL,GAAS,GAAIC,OAAM,UAAW,OAGlC,OAFAD,GAAOM,WAAYD,EAAK,QACxBL,EAAOE,OAAQH,GACRC,EAAOO,QAAQ,YAQtCnB,QACKC,OAAQ,OACRQ,QAAS,kBAAoB,QAAS,gBAAiB,KAAM,SAAEW,EAAOC,EAAgBC,GAGnF,GAAMC,GAAS,uBAEf,QAEIC,MAFG,SAEIC,GAEH,GAAMC,MACAC,EAAaL,EAAGM,OAuCtB,OArCAF,GAAWG,SAAWJ,EAAWI,SACjCH,EAAWI,SAAWT,EAAeX,UAAWe,EAAWK,UAE3DV,EAAMW,KAAMR,EAAS,QAASG,GAAaM,KAAM,SAAErB,GAE3B,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAAKuB,MAEtCP,EAAQQ,SAEJD,MAAOvB,EAAKA,KAAKA,KAAKuB,MACtBE,KAAOzB,EAAKA,KAAKA,KAAKyB,KACtBC,KAAO1B,EAAKA,KAAKA,KAAK0B,OAM1BV,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBC,UAAU,MAjBtBpB,SAuBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBC,UAAU,MAMXb,EAAQA,SAInBc,eAhDG,SAgDahB,GAEZ,GAAMC,MACAC,EAAaL,EAAGM,OAgCtB,OA9BAF,GAAWG,SAAWJ,EAAWI,SAEjCT,EAAMW,KAAMR,EAAS,UAAWG,GAAaM,KAAM,SAAErB,GAE7B,MAAhBA,EAAKsB,OAELN,EAAQQ,UAIRR,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBgB,QAvFG,SAuFMhC,GAEL,GAAMgB,GAAaL,EAAGM,OA8BtB,OA5BAR,GAAMwB,IAASrB,EAAf,UAAiCZ,EAAKyB,KAAtC,UAAsDzB,EAAKuB,OAAWF,KAAM,SAAErB,GAEtD,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,QAASxB,EAAKA,KAAKA,KAAM,IAIjCgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBkB,kBA3HG,SA2HgBlC,GAEf,GAAMgB,GAAaL,EAAGM,OA8BtB,OA5BAR,GAAMwB,IAASrB,EAAf,qBAA4CZ,EAAKyB,KAAjD,UAAiEzB,EAAKuB,OAAWF,KAAM,SAAErB,GAEjE,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,QAASxB,EAAKA,KAAKA,MAI3BgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBmB,6BA/JG,SA+J2BnC,GAE1B,GAAMgB,GAAaL,EAAGM,OA8BtB,OA5BAR,GAAMwB,IAASrB,EAAf,yBAAgDZ,EAAKyB,KAArD,UAAqEzB,EAAKuB,OAAWF,KAAM,SAAErB,GAErE,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,QAASxB,EAAKA,KAAKA,MAI3BgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBoB,oBAnMG,SAmMkBpC,GAEjB,GAAMgB,GAAaL,EAAGM,OAgCtB,OA9BAR,GAAMwB,IAASrB,EAAf,uCAA8DZ,EAAKyB,KAAnE,UAAmFzB,EAAKuB,OAAWF,KAAM,SAAErB,GAEnF,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,SACJxB,KAAMA,EAAKA,KAAKA,OAKpBgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAbnBtB,SAmBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBqB,0BAzOG,SAyOwBrC,GAEvB,GAAMgB,GAAaL,EAAGM,OAgCtB,OA9BAR,GAAMwB,IAASrB,EAAf,qCAA4DZ,EAAKyB,KAAjE,UAAiFzB,EAAKuB,OAAWF,KAAM,SAAErB,GAEjF,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,SACJxB,KAAMA,EAAKA,KAAKA,OAKpBgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAbnBtB,SAmBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBsB,cA/QG,SA+QYC,GAEX,GAAMvB,GAAaL,EAAGM,OA8BtB,OA5BAR,GAAMwB,IAASrB,EAAf,gBAAuC2B,EAAOC,eAA9C,UAAwED,EAAOhB,MAA/E,SAA+FgB,EAAOd,MAAUJ,KAAM,SAAErB,GAEhG,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,QAASxB,EAAKA,KAAKA,KAAM,IAIjCgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInByB,OAnTG,SAmTKF,GAEJ,GAAMvB,GAAUL,EAAGM,OAuCnB,OArCAR,GAAMW,KAAMR,EAAS,WAEjBa,KAAMc,EAAOd,KACbF,MAAOgB,EAAOhB,QAEdF,KAAM,SAAErB,GAEY,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJkB,WAAY,MAMhB1B,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MApBnBtB,SA0BW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInB2B,UAhWG,SAgWQC,GAEP,GAAM5B,GAAaL,EAAGM,OA8BtB,OA5BAR,GAAMwB,IAASrB,EAAf,oBAA2CgC,GAAavB,KAAM,SAAErB,GAExC,MAAhBA,EAAKsB,QAAkBtB,EAAKA,KAAKA,KAEjCgB,EAAQQ,QAASxB,EAAKA,KAAKA,MAI3BgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAXnBtB,SAiBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInB6B,iBApYG,SAoYeC,GAEd,GAAM9B,GAAUL,EAAGM,QAEbF,GAEFQ,MAAOuB,EAAevB,MACtBE,KAAMqB,EAAerB,KACrBzB,MAEI+C,aAAcD,EAAeC,cAsCrC,OAhCAtC,GAAMW,KAAMR,EAAS,eAAgBG,GAAaM,KAAM,SAAErB,GAElC,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJxB,KAAMA,EAAKA,OAMfgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAfnBtB,SAqBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBgC,WAxbG,SAwbSF,GAER,GAAM9B,GAAUL,EAAGM,QAEbF,GAEFQ,MAAOuB,EAAevB,MACtBvB,KAAM8C,EAAe9C,KACrBiD,KAAMH,EAAeG,KAoCzB,OAhCAxC,GAAMW,KAAMR,EAAS,SAAUG,GAAaM,KAAM,SAAErB,GAE5B,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJxB,KAAMA,EAAKA,OAMfgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAfnBtB,SAqBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBkC,iBAxeG,SAweeJ,GAEd,GAAM9B,GAAUL,EAAGM,QAEbF,GAEFQ,MAAOuB,EAAevB,MACtBE,KAAMqB,EAAerB,KACrBzB,KAAM8C,EAAe9C,KAoCzB,OAhCAS,GAAM0C,IAAKvC,EAAS,gBAAkBkC,EAAeN,eAAgBzB,GAAaM,KAAM,SAAErB,GAElE,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJxB,KAAMA,EAAKA,OAMfgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAfnBtB,SAqBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBoC,kBAxhBG,SAwhBgBN,GAEf,GAAM9B,GAAUL,EAAGM,QAEbF,GAEFQ,MAAOuB,EAAevB,MACtBE,KAAMqB,EAAerB,KACrBzB,MACIqD,aAAa,GAqCrB,OAhCA5C,GAAM0C,IAAKvC,EAAS,gBAAkBkC,EAAeN,eAAgBzB,GAAaM,KAAM,SAAErB,GAElE,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJxB,KAAMA,EAAKA,OAMfgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAfnBtB,SAqBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,SAInBsC,oBA1kBG,SA0kBkBR,GAEjB,GAAM9B,GAAUL,EAAGM,QAEbF,GAEFQ,MAAOuB,EAAevB,MACtBE,KAAMqB,EAAerB,KACrBzB,MACIqD,aAAa,GAqCrB,OAhCA5C,GAAM0C,IAAKvC,EAAS,gBAAkBkC,EAAeN,eAAgBzB,GAAaM,KAAM,SAAErB,GAElE,MAAhBA,EAAKsB,OAELN,EAAQQ,SAEJxB,KAAMA,EAAKA,OAMfgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAfnBtB,SAqBW,SAAET,GAETgB,EAAQW,QAEJC,QAAS5B,EAAKA,KAAK4B,QACnBG,OAAO,MAMRf,EAAQA,aAQ/B3B,QAAQC,OAAQ,OACRiE,WAAY,oCAAsC,iBAAkB,WAAY,SAAU,UAAW,SAAUC,EAAOC,EAAUC,EAAQC,GAAU,GAAAC,GAAAC,KAE3IC,EAAaL,EAASxB,IAAK,cACzBjC,EAAeyD,EAASxB,IAAK,YAEnC,OAAK6B,IAAe9D,GAIpBA,EAAO+D,KAAKC,MAAOhE,GAEnBwD,EAAMxB,QAAShC,GAAOqB,KAAM,SAAA4C,GAAiD,GAA7CC,GAA6CD,EAA7CC,YAAaC,EAAgCF,EAAhCE,eAAgBjD,EAAgB+C,EAAhB/C,QAEzD0C,GAAK5D,MAEDkE,YAAAA,EACAC,eAAAA,EACAjD,SAAAA,KAMRsC,EAAMrB,6BAA8BnC,GAAOqB,KAAM,SAAE+C,GAE/CR,EAAKS,kBAELD,EAAOE,IAAK,SAAEC,GAEVA,EAAWC,eAAmB,WAE1B,MAASD,GAAWxB,cAAgBwB,EAAWE,qBAAuBF,EAAWG,oBAAsBH,EAAWI,UAAYJ,EAAWxB,aAAa6B,cAAgBL,EAAWE,oBAAoBG,cAAgBL,EAAWG,mBAAmBE,cAAgBL,EAAWI,SAASC,gBAI3RhB,EAAKS,eAAeQ,KAAMN,OAMlCV,KAAKiB,SAAW,cAChBjB,KAAKkB,aAAc,EAEnBlB,KAAKmB,WAAa,SAAEC,GAEZA,IAAgBrB,EAAKkB,SACrBlB,EAAKmB,aAAenB,EAAKmB,YAEzBnB,EAAKkB,SAAWG,GAKxBpB,KAAKT,kBAAoB,SAAE3B,GAEvBmC,EAAKsB,cAAe,EAEpB1B,EAAMJ,mBAEF3B,KAAMzB,EAAKyB,KACXF,MAAOvB,EAAKuB,MACZiB,eAAgBf,IAEhBJ,KAAM,SAAE+C,GAERR,EAAKsB,cAAe,EAEpBtB,EAAKuB,kBAAmB,EACxBvB,EAAKwB,cAAgB,wBACrBxB,EAAKyB,YAAa,EAClBzB,EAAK0B,cACDC,MAAM,GAEV3B,EAAK4B,YAAc,wBAEnB7B,EAAQ8B,SAASC,WAlBrBlC,SAoBW,SAAEmC,GAET/B,EAAKsB,cAAe,EAEpBtB,EAAKyB,YAAa,EAClBzB,EAAK0B,cACDM,KAAK,GAEThC,EAAK4B,YAAc,mEAM3B3B,KAAKP,oBAAsB,SAAE7B,GAEzBmC,EAAKsB,cAAe,EAEpB1B,EAAMF,qBAEF7B,KAAMzB,EAAKyB,KACXF,MAAOvB,EAAKuB,MACZiB,eAAgBf,IAEhBJ,KAAM,SAAE+C,GAERR,EAAKsB,cAAe,EAEpBtB,EAAKuB,kBAAmB,EACxBvB,EAAKwB,cAAgB,0BACrBxB,EAAKyB,YAAa,EAClBzB,EAAK0B,cACDC,MAAM,GAEV3B,EAAK4B,YAAc,0BAEnB7B,EAAQ8B,SAASC,WAlBrBlC,SAqBW,SAAEmC,GAET/B,EAAKsB,cAAe,EAEpBtB,EAAKyB,YAAa,EAClBzB,EAAK0B,cACDM,KAAK,GAEThC,EAAK4B,YAAc,gEAvHhB9B,EAAOmC,GAAI,WA+HjCxG,QAAQC,OAAQ,OACRiE,WAAY,sBAAwB,WAAY,SAAU,UAAW,iBAAkB,SAAUE,EAAUC,EAAQC,EAASH,GAAQ,GAAAsC,GAAAjC,KAE1H7D,EAAOyD,EAASxB,IAAK,YAC3B4B,MAAKkC,WAAatC,EAASxB,IAAK,eAAkBjC,EAClD6D,KAAKpB,OAAS,WAEV,GAAMzB,GAAUwC,EAAMf,OAAQsB,KAAKC,MAAOhE,GAC1CgB,GAAQK,KAAM,SAAErB,GAEZyD,EAASuC,OAAQ,cACjBvC,EAASuC,OAAQ,eAHrBhF,SAKW,SAAE2E,GAETlC,EAASuC,OAAQ,cACjBvC,EAASuC,OAAQ,eAIrBF,EAAKC,YAAa,EAClBpC,EAAQ8B,SAAW,QAOnCpG,QAAQC,OAAQ,OACRiE,WAAY,uBAAyB,iBAAkB,WAAY,SAAU,SAAUC,EAAOC,EAAUC,GAAS,GAAAuC,GAAApC,KAE1GC,EAAaL,EAASxB,IAAK,cACzBjC,EAAeyD,EAASxB,IAAK,YAEnC,KAAK6B,IAAe9D,EAChB,MAAO0D,GAAOmC,GAAI,OAGtB7F,GAAO+D,KAAKC,MAAOhE,GAEnBwD,EAAMpB,oBAAqBpC,GAAOqB,KAAM,SAAE6E,GAEtCD,EAAKE,mBAAwC,IAAnBD,EAAIlG,KAAKoG,OAIvC,IAAIC,GAAc7C,EAAMxB,QAAShC,EACjCqG,GAAYhF,KAAM,SAAEiF,GAEhBL,EAAKjG,KAAOsG,IAFhBD,SAKW,SAAErG,GAETuG,QAAQC,IAAK,uBAIjBH,EAAc7C,EAAMtB,kBAAmBlC,GACvCqG,EAAYhF,KAAM,SAAEkB,GAEhB0D,EAAKQ,eAAqC,IAAlBlE,EAAOmE,OAC/BT,EAAKU,aACDP,MAAO7D,EAAOmE,OACd1G,KAAMuC,KALd8D,SAQW,SAAErG,GAETuG,QAAQC,IAAK,0BAO5BnH,QAAQC,OAAQ,OACRiE,WAAY,iCAAmC,eAAgB,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUqD,EAAcnD,EAAUhD,EAAOiD,EAAQC,EAASH,GAAQ,GAAAqD,GAAAhD,KAGtL7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IAEpCoC,MAAKpC,KAAOe,EAEZqB,KAAKT,kBAAoB,SAAE3B,GAEvBoF,EAAK3B,cAAe,EAEpB1B,EAAMJ,mBAEF3B,KAAMzB,EAAKyB,KACXF,MAAOvB,EAAKuB,MACZiB,eAAgBf,IAEhBJ,KAAM,SAAE+C,GAERyC,EAAK3B,cAAe,EAEpB2B,EAAKxB,YAAa,EAClBwB,EAAKvB,cACDC,MAAM,GAEVsB,EAAKrB,YAAc,0BAdvBhC,SAiBW,SAAEmC,GAETkB,EAAK3B,cAAe,EAEpB2B,EAAKxB,YAAa,EAClBwB,EAAKvB,cACDM,KAAK,GAETiB,EAAKrB,YAAc,8DAM3B3B,KAAKiD,YAAc,WAEf,MAAID,GAAKE,eAAetC,qBAAuBoC,EAAKE,eAAetC,oBAAoBuC,WAA0E,KAA7DH,EAAKE,eAAetC,oBAAoBuC,UAAUN,QAElJG,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,WACrBL,EAAKrB,YAAc,4FACnBqB,EAAKvB,cAED6B,QAAU,IAGP,QAIPN,EAAKE,eAAetC,qBAEpBoC,EAAKE,eAAetC,oBAAoBuC,UAAYH,EAAKE,eAAetC,oBAAoBuC,cAE5FH,EAAKE,eAAetC,oBAAoBuC,UAAUnC,MAE9CuC,KAAM,oBAMVP,EAAKE,eAAetC,uBAEpBoC,EAAKE,eAAetC,qBAChBuC,cAGJH,EAAKE,eAAetC,oBAAoBuC,UAAUnC,MAE9CuC,KAAM,qBAQlBvD,KAAKwD,WAAa,WAEdR,EAAKS,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgBqE,EAAKpF,KACrBzB,KAAM6G,EAAKE,iBAEX1F,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZmE,EAAKS,YAAa,EAElBT,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,cACrBL,EAAKrB,YAAc,6CACnBqB,EAAKvB,cAEDC,MAAQ,OAUxB1B,KAAK0D,cAAgB,WAEjB,MAAIV,GAAKE,eAAepC,SAASqC,WAA+D,IAAlDH,EAAKE,eAAepC,SAASqC,UAAUN,QAEjFG,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,WACrBL,EAAKrB,YAAc,2FACnBqB,EAAKvB,cAED6B,QAAU,IAGP,QAIPN,EAAKE,eAAepC,UAAYkC,EAAKE,eAAepC,SAASqC,UAE7DH,EAAKE,eAAepC,SAASqC,UAAUnC,MAEnCuC,KAAM,mBAMVP,EAAKE,eAAepC,UAChBqC,cAGJH,EAAKE,eAAepC,SAASqC,UAAUnC,MAEnCuC,KAAM,qBAQlB5D,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAEmG,GAERX,EAAKE,eAAiBS,EAEtBX,EAAKY,sBAAwBZ,EAAKE,eAAe1D,YACjDwD,EAAKrC,eAAmB,WAEpB,MAASqC,GAAKE,eAAehE,cAAgB8D,EAAKE,eAAetC,qBAAuBoC,EAAKE,eAAerC,oBAAsBmC,EAAKE,eAAepC,UAAYkC,EAAKE,eAAehE,aAAa6B,cAAgBiC,EAAKE,eAAetC,oBAAoBG,cAAgBiC,EAAKE,eAAerC,mBAAmBE,cAAgBiC,EAAKE,eAAepC,SAASC,qBAQlXvF,QAAQC,OAAQ,OACRiE,WAAY,4BAA8B,eAAgB,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUqD,EAAcnD,EAAUhD,EAAOiD,EAAQC,EAASH,GAAQ,GAAAkE,GAAA7D,KAGjL7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IACpCoC,MAAKpC,KAAOe,EAEZgB,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAErB,GAER0H,EAAKX,eAAiB/G,EAEtB0H,EAAKC,UAAc,WAEf,MAASD,GAAKX,eAAehE,cAAgB2E,EAAKX,eAAetC,qBAAuBiD,EAAKX,eAAerC,oBAAsBgD,EAAKX,eAAepC,UAAY+C,EAAKX,eAAehE,aAAa6B,cAAgB8C,EAAKX,eAAetC,oBAAoBG,cAAgB8C,EAAKX,eAAerC,mBAAmBE,cAAgB8C,EAAKX,eAAepC,SAASC,qBAQlXvF,QAAQC,OAAQ,OACRiE,WAAY,4BAA8B,iBAAkB,SAAU,WAAY,UAAW,SAAUqE,EAAUlE,EAAQD,EAAUE,GAAU,GAAAkE,GAAAhE,KAGpIiE,EAAOjE,IACbiE,GAAKC,QAAU,WAEXF,EAAKP,YAAa,CAElB,IAAMU,GAAgBJ,EAAS9F,eAAgBgG,EAAKG,KACpDD,GAAc3G,KAAM,SAAE6G,GAElBL,EAAKP,YAAa,EAElBQ,EAAKzC,YAAa,EAClByC,EAAKtC,YAAc,qFACnBsC,EAAKxC,cAEDC,MAAM,KARdyC,SAYW,SAAEG,GAETN,EAAKP,YAAa,EAEda,EAAUpG,QAEV+F,EAAKzC,YAAa,EAClByC,EAAKtC,YAAc2C,EAAUvG,QAC7BkG,EAAKxC,cACDM,KAAK,UAWhCvG,QAAQC,OAAQ,OACRiE,WAAY,sBAAwB,iBAAkB,SAAU,WAAY,UAAW,SAAUqE,EAAUlE,EAAQD,EAAUE,GAE1H,GAAMG,GAAaL,EAASxB,IAAK,cAC3BjC,EAAeyD,EAASxB,IAAK,YAE/B6B,IAAc9D,GACd0D,EAAOmC,GAAI,YAGf,IAAMiC,GAAOjE,IAEbiE,GAAKjH,MAAQ,WAETiH,EAAK5C,cAAe,CAEpB,IAAM8C,GAAgBJ,EAAS/G,MAAOiH,EAAKG,KAC3CD,GAAc3G,KAAM,SAAE+G,GAElBN,EAAK5C,cAAe,EACpB4C,EAAK3C,kBAAmB,EACxB2C,EAAK1C,cAAgB,8BAEtB3B,EAASN,IAAK,YAAaY,KAAKsE,UAAWD,IAC3C3E,EAASN,IAAK,cAAc,GAEJ,IAAnBiF,EAAU1G,KAIVgC,EAAOmC,GAAI,kBAMXnC,EAAOmC,GAAI,eAnBnBmC,SAwBW,SAAEG,GAETL,EAAK5C,cAAe,EAEhBiD,EAAUtG,YAAa,IAEvBiG,EAAKzC,YAAa,EAClByC,EAAKtC,YAAc2C,EAAUvG,QAC7BkG,EAAKxC,cACDM,KAAK,UAWhCvG,QAAQC,OAAQ,OACRiE,WAAY,2BAA6B,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUE,EAAUhD,EAAOiD,EAAQC,EAASH,GAAQ,GAAA8E,GAAAzE,KAGlJ7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,cAErB6F,EAAOjE,IAEb7D,GAAO+D,KAAKC,MAAOhE,GAEnB6D,KAAK0E,YAIGC,KAAM,KACNpB,KAAM,UAMNoB,KAAM,KACNpB,KAAM,YAMdvD,KAAK4E,kBAAoB,SAAE7F,GAEvBY,EAAMb,UAAWC,GAAUvB,KAAM,SAAErB,GAE/BsI,EAAKI,OAAS1I,KAMtB6D,KAAK8E,OAAS,WAEVjF,EAAOmC,GAAI,cAIfhC,KAAK+E,cAAgB,WAEjBN,EAAKhB,YAAa,CAElB,IAAMvG,IAEFQ,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXsB,cAEIqE,KAAMU,EAAKvD,WAAWxB,aAAa8F,eAAeC,UAAY,IAAMhB,EAAKvD,WAAWxB,aAAa8F,eAAeE,SAChHC,SAEIC,OAAQnB,EAAKvD,WAAWxB,aAAaiG,QAAQC,OAC7CC,KAAMpB,EAAKvD,WAAWxB,aAAaiG,QAAQE,KAC3CC,IAAKrB,EAAKvD,WAAWxB,aAAaiG,QAAQG,IAC1CxJ,MAAOmI,EAAKvD,WAAWxB,aAAaiG,QAAQrJ,MAC5CiD,QAASkF,EAAKvD,WAAWxB,aAAaiG,QAAQpG,SAIlDiG,gBAEIzB,KAAMU,EAAKvD,WAAWxB,aAAa8F,eAAeC,UAAY,IAAMhB,EAAKvD,WAAWxB,aAAa8F,eAAeE,SAChHK,aAActB,EAAKvD,WAAWxB,aAAa8F,eAAeQ,OAC1DC,eAAgBxB,EAAKvD,WAAWxB,aAAa8F,eAAeU,SAC5DC,MAAO1B,EAAKvD,WAAWxB,aAAa8F,eAAeW,QAQ/DhG,GAAMX,iBAAkB9B,GAAaM,KAAM,SAAErB,GAEX,MAAzBA,EAAKA,KAAK0C,YAEV4F,EAAKhB,YAAa,EAClB5D,EAAOmC,GAAI,eAIXyC,EAAKmB,SAAU,EACfnB,EAAKoB,aAAe1J,EAAKA,KAAKA,KAAK4B,WAV5C4B,SAcW,SAAExD,GAEVsI,EAAKmB,SAAU,EACfnB,EAAKoB,aAAe1J,EAAK4B,cAQ3CvC,QAAQC,OAAQ,OACRiE,WAAY,qBAAuB,WAAY,QAAS,SAAU,UAAW,iBAAkB,gBAAiB,SAAUE,EAAUhD,EAAOiD,EAAQC,EAASH,EAAOmG,GAAU,GAAAC,GAAA/F,KAGtK7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAI3BjC,GAAO+D,KAAKC,MAAOhE,GAEnB6D,KAAKgG,QAAU,WAEXD,EAAKtC,YAAa,CAElB,IAAMrE,GAAO0G,EAAQtJ,QAAWuJ,EAAK3B,KAAK/G,SAAW0I,EAAK3B,KAAKuB,MAASxJ,EAAKyB,MAEvEV,GAEFQ,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXwB,KAAAA,EACAjD,KAAM4J,EAAK3B,KAIfzE,GAAMR,WAAYjC,GAAaM,KAAM,SAAErB,GAEL,MAAzBA,EAAKA,KAAK0C,YAEVkH,EAAKtC,YAAa,EAClBsC,EAAK3C,WAAY,EACjB2C,EAAKtE,cACDC,MAAM,GAEVqE,EAAK1C,cAAgB,aACrB0C,EAAKpE,YAAL,YAAgCoE,EAAK3B,KAAK/G,SAA1C,+BAIA0I,EAAKtC,YAAa,EAClBsC,EAAK3C,WAAY,EACjB2C,EAAKtE,cACDM,KAAK,GAETgE,EAAK1C,cAAgB,2BACrB0C,EAAKpE,YAAcxF,EAAK4B,WApBjC4B,SAwBW,SAAExD,GAET4J,EAAKtC,YAAa,EAClBsC,EAAK3C,WAAY,EACjB2C,EAAKtE,cACDM,KAAK,GAETgE,EAAK1C,cAAgB,2BACrBX,QAAQC,IAAKxG,GACb4J,EAAKpE,YAAcxF,EAAK4B,cAQ3CvC,QAAQC,OAAQ,OACRiE,WAAY,qCAAuC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUhD,EAAOmG,EAAcjD,EAASH,GAAQ,GAAAsG,GAAAjG,KAGxK7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IACpCoC,MAAKpC,KAAOe,EAEZgB,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAErB,GAER8J,EAAK/C,eAAiB/G,IAI1B6D,KAAKiD,YAAc,WAEf,MAAIgD,GAAK/C,eAAetC,qBAAoF,KAA7DqF,EAAK/C,eAAetC,oBAAoBuC,UAAUN,QAE7FoD,EAAK7C,WAAY,EACjB6C,EAAK5C,cAAgB,WACrB4C,EAAKtE,YAAc,4FACnBsE,EAAKxE,cAED6B,QAAU,IAGP,QAIP2C,EAAK/C,eAAetC,oBAEpBqF,EAAK/C,eAAetC,oBAAoBuC,UAAUnC,MAE9CuC,KAAM,mBAMV0C,EAAK/C,eAAetC,uBAEpBqF,EAAK/C,eAAetC,qBAChBuC,cAGJ8C,EAAK/C,eAAetC,oBAAoBuC,UAAUnC,MAE9CuC,KAAM,qBAQlBvD,KAAKwD,WAAa,WAEdyC,EAAKxC,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgBsH,EAAKrI,KACrBzB,KAAM8J,EAAK/C,iBAEX1F,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZoH,EAAKxC,YAAa,EAElBwC,EAAK7C,WAAY,EACjB6C,EAAK5C,cAAgB,cACrB4C,EAAKtE,YAAc,6CACnBsE,EAAKxE,cAEDC,MAAQ,UAYnClG,QAAQC,OAAQ,OACRiE,WAAY,0BAA4B,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUwG,EAAGtG,EAAUhD,EAAOmG,EAAcjD,EAASH,GAAQ,GAAAwG,GAAAnG,KAG1K7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IACpCoC,MAAKpC,KAAOe,EAEZgB,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAErB,GAERgK,EAAKjD,eAAiB/G,IAI1B6D,KAAKiD,YAAc,WAEf,MAAIkD,GAAKjD,eAAepC,SAASqC,WAA+D,IAAlDgD,EAAKjD,eAAepC,SAASqC,UAAUN,QAEjFsD,EAAK/C,WAAY,EACjB+C,EAAK9C,cAAgB,WACrB8C,EAAKxE,YAAc,2FACnBwE,EAAK1E,cAED6B,QAAU,IAGP,QAIP6C,EAAKjD,eAAepC,UAAYqF,EAAKjD,eAAepC,SAASqC,UAE7DgD,EAAKjD,eAAepC,SAASqC,UAAUnC,MAEnCuC,KAAM,mBAMV4C,EAAKjD,eAAepC,UAChBqC,cAGJgD,EAAKjD,eAAepC,SAASqC,UAAUnC,MAEnCuC,KAAM,qBAQlBvD,KAAKwD,WAAa,WAEd2C,EAAK1C,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgBwH,EAAKvI,KACrBzB,KAAMgK,EAAKjD,iBAEX1F,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZsH,EAAK1C,YAAa,EAElB0C,EAAK/C,WAAY,EACjB+C,EAAK9C,cAAgB,cACrB8C,EAAKxE,YAAc,6CACnBwE,EAAK1E,cAEDC,MAAQ,UAYnClG,QAAQC,OAAQ,OACRiE,WAAY,gCAAkC,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUwG,EAAGtG,EAAUhD,EAAOmG,EAAcjD,EAASH,GAAQ,GAAAyG,GAAApG,KAGhL7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IACpCoC,MAAKpC,KAAOe,EAEZgB,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAErB,GAERiK,EAAKlD,eAAiB/G,EAEsC,IAAxDiK,EAAKlD,eAAemD,eAAelD,UAAUN,SAQrD7C,KAAKwD,WAAa,WAEd4C,EAAK3C,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgByH,EAAKxI,KACrBzB,KAAMiK,EAAKlD,iBAEX1F,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZuH,EAAK3C,YAAa,EAElB2C,EAAKhD,WAAY,EACjBgD,EAAK/C,cAAgB,cACrB+C,EAAKzE,YAAc,6CACnByE,EAAK3E,cAEDC,MAAQ,UAYnClG,QAAQC,OAAQ,OACRiE,WAAY,8BAAgC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUhD,EAAOmG,EAAcjD,EAASH,GAAQ,GAAA2G,GAAAtG,KAE/JpC,EAAOmF,EAAanF,KAEtBzB,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3B4B,MAAKpC,KAAOmF,EAAanF,KAEzBzB,EAAO+D,KAAKC,MAAOhE,GAEnBwD,EAAMlB,eAEFf,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgBf,IAEhBJ,KAAM,SAAErB,GAERmK,EAAK5F,WAAavE,IAItB6D,KAAKwD,WAAa,WAEd8C,EAAK7C,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgBf,EAChBzB,KAAMmK,EAAK5F,aAEXlD,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZyH,EAAK7C,YAAa,EAElB6C,EAAKlD,WAAY,EACjBkD,EAAKjD,cAAgB,cACrBiD,EAAK3E,YAAc,6CACnB2E,EAAK7E,cAEDC,MAAQ,UAYnClG,QAAQC,OAAQ,OACRiE,WAAY,oCAAsC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUhD,EAAOmG,EAAcjD,EAASH,GAAQ,GAAA4G,GAAAvG,KAGvK7D,GADeyD,EAASxB,IAAK,cACpBwB,EAASxB,IAAK,aAE3BjC,GAAO+D,KAAKC,MAAOhE,EAEnB,IAAMwC,GAAiBoE,EAAanF,IACpCoC,MAAKpC,KAAOe,EAEZgB,EAAMlB,eAEFE,eAAAA,EACAjB,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,OAEXJ,KAAM,SAAErB,GAERoK,EAAKrD,eAAiB/G,EAElBoK,EAAKrD,eAAerC,mBAAmB2F,OAAOC,cAC9CF,EAAKrD,eAAerC,mBAAmB2F,OAAOC,YAAc,GAAIC,MAAMH,EAAKrD,eAAerC,mBAAmB2F,OAAOC,cAGpHF,EAAKrD,eAAerC,mBAAmB2F,OAAOG,gBAC9CJ,EAAKrD,eAAerC,mBAAmB2F,OAAOG,cAAgB,GAAID,MAAMH,EAAKrD,eAAerC,mBAAmB2F,OAAOG,gBAGtHJ,EAAKrD,eAAerC,mBAAmB+F,cAAcH,cACrDF,EAAKrD,eAAerC,mBAAmB+F,cAAcH,YAAc,GAAIC,MAAMH,EAAKrD,eAAerC,mBAAmB+F,cAAcH,cAGlIF,EAAKrD,eAAerC,mBAAmB+F,cAAcD,gBACrDJ,EAAKrD,eAAerC,mBAAmB+F,cAAcD,cAAgB,GAAID,MAAMH,EAAKrD,eAAerC,mBAAmB+F,cAAcD,kBAM5I3G,KAAKwD,WAAa,WAEd+C,EAAK9C,YAAa,EAElB9D,EAAMN,kBAEF3B,MAAOvB,EAAKuB,MACZE,KAAMzB,EAAKyB,KACXe,eAAgB4H,EAAK3I,KACrBzB,KAAMoK,EAAKrD,iBAEX1F,KAAM,SAAEkB,GAEuB,MAA3BA,EAAOvC,KAAK0C,aAEZ0H,EAAK9C,YAAa,EAElB8C,EAAKnD,WAAY,EACjBmD,EAAKlD,cAAgB,cACrBkD,EAAK5E,YAAc,6CACnB4E,EAAK9E,cAEDC,MAAQ","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        // const apiUrl = 'http://api.app.beta.dsmun.com';\n        const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: true,\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n           } );\n\n           $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n           } );\n\n           this.sortType = 'isConfirmed';\n           this.sortReverse = false;\n\n           this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n           };\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n\n           this.guid = conferenceGuid;\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates = this.conferenceData.delegateInformation.delegates || [];\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n           this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               self.isProcessing = true;\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   self.isProcessing = false;\n                   self.hasButtonMessage = true;\n                   self.buttonMessage = \"Redirecting to dashboard...\";\n\n                  $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                  $cookies.put( 'isLoggedIn', true );\n\n                   if( dataLogin.role === 1 ) {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboardAdmin' );\n\n                   } else {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboard' );\n\n                   }\n\n\n               } ).catch( ( dataError ) => {\n\n                   self.isProcessing = false;\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function( $cookies, $http, $state, $window, $rest, $crypto ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: this.user\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   console.log( data );\n                   this.messageText = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}