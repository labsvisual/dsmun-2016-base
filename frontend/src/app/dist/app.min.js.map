{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","$scope","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","sortType","sortReverse","ChangeSort","sortTypeNew","RefreshView","isProcessing","processingOne","processingTwo","GetAllUsers","users","filter","user","push","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","DeleteConference","conferenceGuid","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_","_this4","GetAllotments","committee","conferenceData","countryAllotment","allotments","retVal","allotment","name","AddCountryAllotment","isMessage","messageHeader","yellow","country","AddAnnouncement","announcements","notifications","text","AddGADelegate","delegates","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","isReloading","GetConference","dataDb","fieldClasses","two fields","field","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","countries","code","populateStateList","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","username","assign","metadata","CreateUser","generatedPassword","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","items","slice","reverse","_this10","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', '$scope', function( $rest, $cookies, $state, $window, $scope ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isProcessing = true;\n\n                let processingOne = true\n                  , processingTwo = true;\n\n                $rest.GetAllUsers( {\n\n                   token: data.token,\n\n                } ).then( ( data ) => {\n\n                    processingOne = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.users = [];\n                   data.filter( ( user ) => {\n\n                       if( user.role !== 1 ) this.users.push( user );\n\n                   } );\n\n                } );\n\n                $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n                    processingTwo = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.allConferences = [];\n\n                   dbData.map( ( conference ) => {\n\n                       conference.areFormsFilled = ( () => {\n\n                           return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                       } )();\n\n                       this.allConferences.push( conference );\n\n                   } );\n\n                } );\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } );\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', 'lodash', function( $stateParams, $cookies, $http, $state, $window, $rest, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.GetAllotments = ( committee ) => {\n\n                if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                    return [];\n                }\n\n                let retVal = [];\n\n                this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                    if( committee === allotment.name ) {\n\n                        retVal.push( allotment );\n\n                    }\n\n                } );\n\n                return retVal;\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.allotments && this.conferenceData.countryAllotment.allotments.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.countryAllotment = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.countryAllotment ) ? ( ( this.conferenceData.countryAllotment.allotments ) ? this.conferenceData.countryAllotment : { allotments: [] } ) : { allotments: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.countryAllotment.allotments.push( {\n\n                   name: '',\n                   country: ''\n\n               } );\n\n            };\n\n            this.AddAnnouncement = () => {\n\n                this.conferenceData.announcements = this.conferenceData.announcements || {\n                    notifications: []\n                };\n\n                this.conferenceData.announcements.notifications.push( {\n\n                    text: 'Notification',\n                    name: 'New Notification'\n\n                } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isReloading = true;\n\n                $rest.GetConference( {\n\n                   conferenceGuid,\n                   token: data.token,\n                   guid: data.guid,\n\n                } ).then( ( dataDb ) => {\n\n                   this.conferenceData = dataDb;\n                   this.isReloading = false;\n\n                   this.fieldClasses = {\n\n                       'two fields': ( this.conferenceData.countryAllotment ),\n                       'field': ( !this.conferenceData.countryAllotment )\n\n                   };\n\n                   if( this.conferenceData.travelArrangements ) {\n\n                       if( this.conferenceData.travelArrangements.onward ) {\n\n                           if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                               this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                               this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                           }\n\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                           if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                           }\n\n                       }\n\n                   }\n\n                   this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n                   this.areFormsFilled = ( () => {\n\n                       return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n                   } )();\n\n                } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: _.assign( this.user, this.metadata )\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                        if( data.data.data && data.data.data.generatedPassword ) {\n\n                            this.messageText += ` The generated password is ${ data.data.data.generatedPassword }.`;\n\n                        }\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/reset', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.GetAllotments = ( committee ) => {\n\n               if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                   return [];\n               }\n\n               let retVal = [];\n\n               this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                   if( committee === allotment.name ) {\n\n                       retVal.push( allotment );\n\n                   }\n\n               } );\n\n               return retVal;\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}