{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","$scope","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","sortType","sortReverse","ChangeSort","sortTypeNew","RefreshView","isProcessing","processingOne","processingTwo","GetAllUsers","users","filter","user","push","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","DeleteConference","conferenceGuid","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_","_this4","schoolGuid","GetAllotments","committee","conferenceData","countryAllotment","allotments","retVal","allotment","name","AddCountryAllotment","country","PostNotification","notification","postData","PostNewNotification","isMessage","messageHeader","green","AddGADelegate","delegates","yellow","UpdateView","RemoveGADelegate","index","splice","AddDelegate","RemoveDelegate","UpdateForm","processing","onward","departureDate","Date","UTC","getYear","getMonth","getDate","arrivalDate","returnJourney","log","UpdateConference","statusCode","isReloading","GetConference","dataDb","fieldClasses","two fields","field","isConferenceConfirmed","isConfirmed","shouldShowNoDelegatesMessage","_this5","GetNotifications","notifications","isAllDone","MarkAsViewed","notificationId","elem","element","closest","addClass","alert","$restApi","_this6","Execute","resultPromise","ForgotPassword","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","countries","code","populateStateList","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","username","assign","metadata","CreateUser","generatedPassword","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","notificationData","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","items","slice","reverse","_this10","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:schoolGuid/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               })\n               .state( 'userWiseAllocation', {\n\n                   url: '/dashboard/users/allocations',\n                   templateUrl: 'app/templates/user-wise-allocation.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', '$scope', function( $rest, $cookies, $state, $window, $scope ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isProcessing = true;\n\n                let processingOne = true\n                  , processingTwo = true;\n\n                $rest.GetAllUsers( {\n\n                   token: data.token,\n\n                } ).then( ( data ) => {\n\n                    processingOne = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.users = [];\n                   data.filter( ( user ) => {\n\n                       if( user.role !== 1 ) this.users.push( user );\n\n                   } );\n\n                } );\n\n                $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n                    processingTwo = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.allConferences = [];\n\n                   dbData.map( ( conference ) => {\n\n                       conference.areFormsFilled = ( () => {\n\n                           return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                       } )();\n\n                       this.allConferences.push( conference );\n\n                   } );\n\n                } );\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } );\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', 'lodash', function( $stateParams, $cookies, $http, $state, $window, $rest, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n            this.schoolGuid = $stateParams.schoolGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.GetAllotments = ( committee ) => {\n\n                if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                    return [];\n                }\n\n                let retVal = [];\n\n                this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                    if( committee === allotment.name ) {\n\n                        retVal.push( allotment );\n\n                    }\n\n                } );\n\n                return retVal;\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               this.conferenceData.countryAllotment = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.countryAllotment ) ? ( ( this.conferenceData.countryAllotment.allotments ) ? this.conferenceData.countryAllotment : { allotments: [] } ) : { allotments: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.countryAllotment.allotments.push( {\n\n                   name: '',\n                   country: ''\n\n               } );\n\n            };\n\n            this.PostNotification = () => {\n\n                this.isProcessing = true;\n                this.notification.guid = $stateParams.schoolGuid;\n\n                const postData =  {\n\n                    guid: data.guid,\n                    token: data.token,\n                    data: this.notification\n\n                };\n\n                $rest.PostNewNotification( postData ).then( ( data ) => {\n\n                    this.isProcessing = false;\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Success!\";\n                    this.messageText = \"A notification was successfully sent to the respective school.\";\n                    this.messageClass = {\n\n                        'green': true,\n\n                    };\n\n                    this.notification = {};\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Error!\";\n                    this.messageText = \"There was an error in sending the notification.\";\n                    this.messageClass = {\n\n                        'red': true,\n\n                    };\n\n                } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length >= 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n            };\n\n            this.RemoveGADelegate = ( index ) => {\n\n                if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length <= 0 ) {\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Warning!\";\n                    this.messageText = \"You can not remove any more delegates.\";\n                    this.messageClass = {\n\n                        'yellow': true,\n\n                    };\n\n                    return false;\n\n                }\n\n                this.conferenceData.gaCrisis = ( () => {\n\n                    return (\n\n                        ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                    )\n\n                } )();\n\n                this.conferenceData.gaCrisis.delegates.splice( index, 1 );\n                this.UpdateView();\n\n            };\n\n            this.AddDelegate = () => {\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n            };\n\n            this.RemoveDelegate = ( index ) => {\n\n                if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length <= 0 ) {\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Warning!\";\n                    this.messageText = \"You can not remove any more delegates.\";\n                    this.messageClass = {\n\n                        'yellow': true,\n\n                    };\n\n                    return false;\n\n                }\n\n                this.conferenceData.delegateInformation = ( () => {\n\n                    return (\n\n                        ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                    )\n\n                } )();\n\n                this.conferenceData.delegateInformation.delegates.splice( index, 1 );\n                this.UpdateView();\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               this.conferenceData.travelArrangements.onward.departureDate = new Date( Date.UTC( this.conferenceData.travelArrangements.onward.departureDate.getYear(), this.conferenceData.travelArrangements.onward.departureDate.getMonth(), this.conferenceData.travelArrangements.onward.departureDate.getDate() ) );\n               this.conferenceData.travelArrangements.onward.arrivalDate = new Date( Date.UTC( this.conferenceData.travelArrangements.onward.arrivalDate.getYear(), this.conferenceData.travelArrangements.onward.arrivalDate.getMonth(), this.conferenceData.travelArrangements.onward.arrivalDate.getDate() ) );\n               this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( Date.UTC( this.conferenceData.travelArrangements.returnJourney.departureDate.getYear(), this.conferenceData.travelArrangements.returnJourney.departureDate.getMonth(), this.conferenceData.travelArrangements.returnJourney.departureDate.getDate() ) );\n               this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( Date.UTC( this.conferenceData.travelArrangements.returnJourney.arrivalDate.getYear(), this.conferenceData.travelArrangements.returnJourney.arrivalDate.getMonth(), this.conferenceData.travelArrangements.returnJourney.arrivalDate.getDate() ) );\n\n               console.log( this.conferenceData.travelArrangements.returnJourney );\n               console.log( this.conferenceData.travelArrangements.onward );\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isReloading = true;\n\n                $rest.GetConference( {\n\n                   conferenceGuid,\n                   token: data.token,\n                   guid: data.guid,\n\n                } ).then( ( dataDb ) => {\n\n                   this.conferenceData = dataDb;\n                   this.isReloading = false;\n\n                   this.fieldClasses = {\n\n                       'two fields': ( this.conferenceData.countryAllotment ),\n                       'field': ( !this.conferenceData.countryAllotment )\n\n                   };\n\n                   if( this.conferenceData.travelArrangements ) {\n\n                       if( this.conferenceData.travelArrangements.onward ) {\n\n                           if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                               this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                               this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                           }\n\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                           if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                           }\n\n                       }\n\n                   }\n\n                   this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n                   this.areFormsFilled = ( () => {\n\n                       return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n                   } )();\n\n                } );\n\n            };\n\n            this.UpdateView = () => {\n\n                this.shouldShowNoDelegatesMessage = ( () => {\n\n                    if( this.conferenceData.delegateInformation ) {\n\n                        if( this.conferenceData.delegateInformation.delegates ) {\n\n                            return ( this.conferenceData.delegateInformation.delegates.length === 0 );\n\n                        } else { return false; }\n\n                    } else { return false; }\n\n                } )();\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetNotifications( {\n\n                guid: data.guid,\n                token: data.token\n\n            } ).then( data => {\n\n                this.notifications = data;\n\n            } );\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n            this.MarkAsViewed = ( notificationId ) => {\n\n                $rest.MarkAsViewed( {\n\n                    notificationId,\n                    guid: data.guid,\n                    token: data.token\n\n                } ).then( ( data ) => {\n\n                    const elem = angular.element( `#${ notificationId }` ).closest( '.message' );\n                    elem.addClass( 'successfully-saved' ).addClass( 'hide-opacity' );\n\n                } ).catch( ( err ) => {\n\n                    alert( 'An error was encountered. Please try again later.' );\n\n                } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: _.assign( this.user, this.metadata )\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                        if( data.data.data && data.data.data.generatedPassword ) {\n\n                            this.messageText += ` The generated password is ${ data.data.data.generatedPassword }.`;\n\n                        }\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ViewUserWiseController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            \n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/reset', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            PostNewNotification( notificationData ) {\n\n                const promise    = $q.defer();\n\n                $http.post( apiUrl + '/notifications', {\n\n                    token: notificationData.token,\n                    data: notificationData.data,\n                    guid: notificationData.guid,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetNotifications( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/notifications/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            MarkAsViewed( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/notifications/${ data.guid }/${ data.notificationId }/viewed?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.UpdateView();\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.GetAllotments = ( committee ) => {\n\n               if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                   return [];\n               }\n\n               let retVal = [];\n\n               this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                   if( committee === allotment.name ) {\n\n                       retVal.push( allotment );\n\n                   }\n\n               } );\n\n               return retVal;\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length >= 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n           };\n\n           this.RemoveDelegate = ( index ) => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length <= 0 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not remove any more delegates.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.splice( index, 1 );\n               this.UpdateView();\n\n           };\n\n           this.UpdateView = () => {\n\n               this.shouldShowNoDelegatesMessage = ( () => {\n\n                   if( this.conferenceData.delegateInformation ) {\n\n                       if( this.conferenceData.delegateInformation.delegates ) {\n\n                           return ( this.conferenceData.delegateInformation.delegates.length === 0 );\n\n                       } else { return false; }\n\n                   } else { return false; }\n\n               } )();\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n               this.UpdateView();\n\n           } );\n\n           this.RemoveDelegate = ( index ) => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length <= 0 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not remove any more delegates.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.splice( index, 1 );\n               this.UpdateView();\n\n           };\n\n           this.UpdateView = () => {\n\n               this.shouldShowNoDelegatesMessage = ( () => {\n\n                   if( this.conferenceData.gaCrisis ) {\n\n                       if( this.conferenceData.gaCrisis.delegates ) {\n\n                           return ( this.conferenceData.gaCrisis.delegates.length === 0 );\n\n                       } else { return false; }\n\n                   } else { return false; }\n\n               } )();\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length >= 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}