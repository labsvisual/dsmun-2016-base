{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","_this","this","isLoggedIn","get","data","JSON","parse","GetUser","then","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","isFormFilled","delegateInformation","travelArrangements","gaCrisis","push","ConfirmConference","guid","isProcessing","token","conferenceGuid","hasMessage","messageClass","blue","messageText","err","red","go","$window","_this2","showLogout","Logout","promise","remove","location","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","log","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddDelegate","conferenceData","delegates","isMessage","messageHeader","yellow","name","UpdateForm","processing","UpdateConference","statusCode","AddGADelegate","GetConference","dataDb","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","self","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","error","message","Login","dataLogin","hasButtonMessage","buttonMessage","put","stringify","role","loggedIn","_this7","countries","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","factory","getSha512","shaObj","jsSHA","update","getHash","$cryptoService","$q","apiUrl","userObject","defer","password","post","status","resolve","reject","GetUnconfirmedConferences","confUserObject","_this8","_","_this9","_this10","medicalHistory","_this11","_this12","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n           } );\n\n           $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled;\n                   this.allConferences.push( conference );\n\n               } );\n\n           } );\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n\n           this.guid = conferenceGuid;\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n           this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               self.isProcessing = true;\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   self.isProcessing = false;\n                   self.hasButtonMessage = true;\n                   self.buttonMessage = \"Redirecting to dashboard...\";\n\n                  $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                  $cookies.put( 'isLoggedIn', true );\n\n                   if( dataLogin.role === 1 ) {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboardAdmin' );\n\n                   } else {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboard' );\n\n                   }\n\n\n               } ).catch( ( dataError ) => {\n\n                   self.isProcessing = false;\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        // const apiUrl = 'http://api.app.beta.dsmun.com';\n        const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: true,\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}