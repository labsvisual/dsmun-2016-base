{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","GetAllUsers","users","filter","user","push","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","sortType","sortReverse","ChangeSort","sortTypeNew","DeleteConference","conferenceGuid","isProcessing","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddCountryAllotment","conferenceData","countryAllotment","countries","isMessage","messageHeader","yellow","name","AddAnnouncement","announcements","notifications","text","AddGADelegate","delegates","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","GetConference","dataDb","fieldClasses","two fields","field","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_","_this9","NewUser","hash","getHmac","username","assign","metadata","CreateUser","generatedPassword","items","slice","reverse","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","_this10","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetAllUsers( {\n\n               token: data.token,\n\n            } ).then( ( data ) => {\n\n               this.users = [];\n               data.filter( ( user ) => {\n\n                   if( user.role !== 1 ) this.users.push( user );\n\n               } );\n\n            } );\n\n            $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n            } );\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } );\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries && this.conferenceData.countryAllotment.countries.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.countryAllotment = this.conferenceData.countryAllotment || {\n                   countries: []\n               };\n\n               this.conferenceData.countryAllotment.countries.push( {\n\n                   name: 'Country Name'\n\n               } );\n\n            };\n\n            this.AddAnnouncement = () => {\n\n                this.conferenceData.announcements = this.conferenceData.announcements || {\n                    notifications: []\n                };\n\n                this.conferenceData.announcements.notifications.push( {\n\n                    text: 'Notification',\n                    name: 'New Notification'\n\n                } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = this.conferenceData.gaCrisis || {\n                   delegates: []\n               };\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = this.conferenceData.delegateInformation || {\n                   delegates: []\n               };\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: _.assign( this.user, this.metadata )\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                        if( data.data.data && data.data.data.generatedPassword ) {\n\n                            this.messageText += ` The generated password is ${ data.data.data.generatedPassword }.`;\n\n                        }\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = this.conferenceData.delegateInformation || {\n                   delegates: []\n               };\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = this.conferenceData.gaCrisis || {\n                   delegates: []\n               };\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}