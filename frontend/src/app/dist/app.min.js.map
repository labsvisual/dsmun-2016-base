{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","GetAllUsers","users","GetUser","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","DeleteConference","conferenceGuid","isProcessing","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddCountryAllotment","conferenceData","countryAllotment","countries","isMessage","messageHeader","yellow","name","AddAnnouncement","announcements","notifications","text","AddGADelegate","delegates","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","GetConference","dataDb","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","CreateUser","log","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","filter","items","slice","reverse","_this10","fieldClasses","two fields","field","_","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetAllUsers( {\n\n               token: data.token,\n\n            } ).then( ( data ) => {\n\n               this.users = data;\n\n            } );\n\n            $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n            } );\n\n            $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n            } );\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries && this.conferenceData.countryAllotment.countries.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries ) {\n\n                   this.conferenceData.countryAllotment.countries.push( {\n\n                       name: 'Country Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.countryAllotment = {\n                       countries: []\n                   };\n\n                   this.conferenceData.countryAllotment.countries.push( {\n\n                       name: 'Country Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddAnnouncement = () => {\n\n               if( this.conferenceData.announcements && this.conferenceData.announcements.notifications ) {\n\n                   this.conferenceData.announcements.notifications.push( {\n\n                       text: 'Notification',\n                       name: 'New Notification'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.announcements = {\n                       notifications: []\n                   };\n\n                   this.conferenceData.announcements.notifications.push( {\n\n                       text: 'Notification',\n                       name: 'New Notification'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates = this.conferenceData.delegateInformation.delegates || [];\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function( $cookies, $http, $state, $window, $rest, $crypto ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: this.user\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   console.log( data );\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   \n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}