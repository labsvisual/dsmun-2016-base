{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","GetAllUsers","users","GetUser","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","ConfirmConference","guid","isProcessing","conferenceGuid","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddGADelegate","conferenceData","delegates","isMessage","messageHeader","yellow","name","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","GetConference","dataDb","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","countries","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","CreateUser","log","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confirmationId","_this10","_","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetAllUsers( {\n\n               token: data.token,\n\n            } ).then( ( data ) => {\n\n               this.users = data;\n\n            } );\n\n            $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n            } );\n\n            $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n            } );\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates = this.conferenceData.delegateInformation.delegates || [];\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function( $cookies, $http, $state, $window, $rest, $crypto ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: this.user\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   console.log( data );\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        // const apiUrl = 'http://api.app.beta.dsmun.com';\n        // const apiUrl = 'http://localhost:3345';\n\n        const apiUrl = 'http://api.app.beta.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   \n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}