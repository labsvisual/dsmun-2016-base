{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","GetAllUsers","users","GetUser","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","DeleteConference","conferenceGuid","isProcessing","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddCountryAllotment","conferenceData","countryAllotment","countries","isMessage","messageHeader","yellow","name","AddGADelegate","delegates","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","GetConference","dataDb","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","CreateUser","log","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","_this10","fieldClasses","two fields","field","_","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetAllUsers( {\n\n               token: data.token,\n\n            } ).then( ( data ) => {\n\n               this.users = data;\n\n            } );\n\n            $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n            } );\n\n            $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n            } );\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries && this.conferenceData.countryAllotment.countries.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries ) {\n\n                   this.conferenceData.countryAllotment.countries.push( {\n\n                       name: 'Country Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.countryAllotment = {\n                       countries: []\n                   };\n\n                   this.conferenceData.countryAllotment.countries.push( {\n\n                       name: 'Country Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates = this.conferenceData.delegateInformation.delegates || [];\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function( $cookies, $http, $state, $window, $rest, $crypto ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: this.user\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   console.log( data );\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   \n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}