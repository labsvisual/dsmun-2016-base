{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","GetUser","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","ConfirmConference","guid","isProcessing","conferenceGuid","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddDelegate","conferenceData","delegates","isMessage","messageHeader","yellow","name","UpdateForm","processing","UpdateConference","statusCode","AddGADelegate","GetConference","dataDb","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","self","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","message","Login","dataLogin","put","stringify","loggedIn","_this7","countries","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this8","NewUser","hash","getHmac","CreateUser","log","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$cryptoService","$q","apiUrl","defer","resolve","reject","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confirmationId","_this9","_","_this10","_this11","_this12","_this13"],"mappings":"AAAA,YAAAA,SACKC,OAAQ,OACL,YACA,YACA,aAGRD,QACKC,OAAQ,OAEbD,QAAQC,OAAQ,OACRC,QAAU,qBAAsB,iBAAkB,SAAEC,EAAoBC,GAErED,EAAmBE,UAAW,KAE9BD,EACKE,MAAO,QAEJC,IAAK,IACLC,YAAa,gCAGhBF,MAAO,UAEJC,IAAK,UACLC,YAAa,uCAGhBF,MAAO,aAEJC,IAAK,aACLC,YAAa,iCAGhBF,MAAO,iBAEJC,IAAK,mBACLC,YAAa,sCAGhBF,MAAO,kBAEJC,IAAK,qBACLC,YAAa,uCAGhBF,MAAO,oBAEJC,IAAK,kCACLC,YAAa,0CAGhBF,MAAO,2BAEJC,IAAK,+BACLC,YAAa,kDAGhBF,MAAO,0BAEJC,IAAK,4BACLC,YAAa,iDAGhBF,MAAO,gBAEJC,IAAK,wBACLC,YAAa,uCAGhBF,MAAO,kBAEJC,IAAK,mBACLC,YAAa,uCAGhBF,MAAO,uBAEJC,IAAK,oCACLC,YAAa,6CAGhBF,MAAO,cAEJC,IAAK,uBACLC,YAAa,mCAMhCR,QAAQC,OAAQ,OACRQ,WAAY,oCAAsC,iBAAkB,WAAY,SAAU,UAAW,SAAUC,EAAOC,EAAUC,EAAQC,GAAU,GAAAC,GAAAC,KAE3IC,EAAaL,EAASM,IAAK,cACzBC,EAAWP,EAASM,IAAK,YAE3BD,IAAcE,IAEdA,EAAOC,KAAKC,MAAOF,GAEnBR,EAAMW,aAAcH,EAAKI,OAAQC,KAAM,SAAEC,GAEjCA,EAAMA,QAEY,IAAdN,EAAKO,KAELb,EAAOc,GAAI,kBAIXd,EAAOc,GAAI,gBAVvBhB,SAgBW,SAAEiB,GAETf,EAAOc,GAAI,WAMnBhB,EAAMkB,QAASV,GAAOK,KAAM,SAAAM,GAAiD,GAA7CC,GAA6CD,EAA7CC,YAAaC,EAAgCF,EAAhCE,eAAgBC,EAAgBH,EAAhBG,QAEzDlB,GAAKI,MAEDY,YAAAA,EACAC,eAAAA,EACAC,SAAAA,KAMRtB,EAAMuB,6BAA8Bf,GAAOK,KAAM,SAAEW,GAE/CpB,EAAKqB,kBAELD,EAAOE,IAAK,SAAEC,GAEVA,EAAWC,eAAmB,WAE1B,MAASD,GAAWE,cAAgBF,EAAWG,qBAAuBH,EAAWI,oBAAsBJ,EAAWK,UAAYL,EAAWE,aAAaI,cAAgBN,EAAWG,oBAAoBG,cAAgBN,EAAWI,mBAAmBE,cAAgBN,EAAWK,SAASC,gBAI3R7B,EAAKqB,eAAeS,KAAMP,OAMlCtB,KAAK8B,SAAW,cAChB9B,KAAK+B,aAAc,EAEnB/B,KAAKgC,WAAa,SAAEC,GAEZA,IAAgBlC,EAAK+B,SACrB/B,EAAKgC,aAAehC,EAAKgC,YAEzBhC,EAAK+B,SAAWG,GAKxBjC,KAAKkC,kBAAoB,SAAEC,GAEvBpC,EAAKqC,cAAe,EAEpBzC,EAAMuC,mBAEFC,KAAMhC,EAAKgC,KACX5B,MAAOJ,EAAKI,MACZ8B,eAAgBF,IAEhB3B,KAAM,SAAEW,GAERpB,EAAKqC,cAAe,EAEpBrC,EAAKuC,kBAAmB,EACxBvC,EAAKwC,cAAgB,wBACrBxC,EAAKyC,YAAa,EAClBzC,EAAK0C,cACDC,MAAM,GAEV3C,EAAK4C,YAAc,wBAEnB7C,EAAQ8C,SAASC,WAlBrBlD,SAoBW,SAAEiB,GAETb,EAAKqC,cAAe,EAEpBrC,EAAKyC,YAAa,EAClBzC,EAAK0C,cACDK,KAAK,GAET/C,EAAK4C,YAAc,8DAM3B3C,KAAK+C,oBAAsB,SAAEZ,GAEzBpC,EAAKqC,cAAe,EAEpBzC,EAAMoD,qBAEFZ,KAAMhC,EAAKgC,KACX5B,MAAOJ,EAAKI,MACZ8B,eAAgBF,IAEhB3B,KAAM,SAAEW,GAERpB,EAAKqC,cAAe,EAEpBrC,EAAKuC,kBAAmB,EACxBvC,EAAKwC,cAAgB,0BACrBxC,EAAKyC,YAAa,EAClBzC,EAAK0C,cACDC,MAAM,GAEV3C,EAAK4C,YAAc,0BAEnB7C,EAAQ8C,SAASC,WAlBrBlD,SAqBW,SAAEiB,GAETb,EAAKqC,cAAe,EAEpBrC,EAAKyC,YAAa,EAClBzC,EAAK0C,cACDK,KAAK,GAET/C,EAAK4C,YAAc,iEAQtC1D,QAAQC,OAAQ,OACRQ,WAAY,sBAAwB,WAAY,SAAU,UAAW,iBAAkB,SAAUE,EAAUC,EAAQC,EAASH,GAAQ,GAAAqD,GAAAhD,KAE1HG,EAAOP,EAASM,IAAK,YAC3BF,MAAKiD,WAAarD,EAASM,IAAK,eAAkBC,EAClDH,KAAKkD,OAAS,WAEV,GAAMC,GAAUxD,EAAMuD,OAAQ9C,KAAKC,MAAOF,GAC1CgD,GAAQ3C,KAAM,SAAEL,GAEZP,EAASwD,OAAQ,cACjBxD,EAASwD,OAAQ,eAHrBD,SAKW,SAAEvC,GAEThB,EAASwD,OAAQ,cACjBxD,EAASwD,OAAQ,eAIrBJ,EAAKC,YAAa,EAClBnD,EAAQ8C,SAAW,QAOnC3D,QAAQC,OAAQ,OACRQ,WAAY,uBAAyB,iBAAkB,WAAY,SAAU,SAAUC,EAAOC,EAAUC,GAAS,GAAAwD,GAAArD,KAE1GC,EAAaL,EAASM,IAAK,cACzBC,EAAeP,EAASM,IAAK,YAEnCC,GAAOC,KAAKC,MAAOF,GAEfF,GAAcE,GAEdR,EAAMW,aAAcH,EAAKI,OAAQC,KAAM,SAAEC,GAEjCA,EAAMA,QAEY,IAAdN,EAAKO,KAELb,EAAOc,GAAI,kBAIXd,EAAOc,GAAI,gBAVvBhB,SAgBW,SAAEiB,GAETf,EAAOc,GAAI,UAMnBhB,EAAM2D,oBAAqBnD,GAAOK,KAAM,SAAE+C,GAEtCF,EAAKG,mBAAwC,IAAnBD,EAAIpD,KAAKsD,OAIvC,IAAIC,GAAc/D,EAAMkB,QAASV,EACjCuD,GAAYlD,KAAM,SAAEmD,GAEhBN,EAAKlD,KAAOwD,IAFhBD,SAKW,SAAEvD,GAETyD,QAAQC,MAAO,mGAKnBH,EAAc/D,EAAMmE,kBAAmB3D,GACvCuD,EAAYlD,KAAM,SAAEuD,GAEhBV,EAAKW,eAAqC,IAAlBD,EAAOE,OAC/BZ,EAAKa,aACDT,MAAOM,EAAOE,OACd9D,KAAM4D,KALdL,SAQW,SAAEvD,GAETyD,QAAQC,MAAO,iGACfhE,EAAOc,GAAI,aAO1B1B,QAAQC,OAAQ,OACRQ,WAAY,iCAAmC,eAAgB,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUyE,EAAcvE,EAAUwE,EAAOvE,EAAQC,EAASH,GAAQ,GAAA0E,GAAArE,KAGtLG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IAEpCnC,MAAKmC,KAAOE,EAEZrC,KAAKkC,kBAAoB,SAAEC,GAEvBkC,EAAKjC,cAAe,EAEpBzC,EAAMuC,mBAEFC,KAAMhC,EAAKgC,KACX5B,MAAOJ,EAAKI,MACZ8B,eAAgBF,IAEhB3B,KAAM,SAAEW,GAERkD,EAAKjC,cAAe,EAEpBiC,EAAK7B,YAAa,EAClB6B,EAAK5B,cACDC,MAAM,GAEV2B,EAAK1B,YAAc,0BAdvBhD,SAgBW,SAAEiB,GAETyD,EAAKjC,cAAe,EAEpBiC,EAAK7B,YAAa,EAClB6B,EAAK5B,cACDK,KAAK,GAETuB,EAAK1B,YAAc,8DAM3B3C,KAAKsE,YAAc,WAEf,MAAID,GAAKE,eAAe9C,qBAAuB4C,EAAKE,eAAe9C,oBAAoB+C,WAA0E,KAA7DH,EAAKE,eAAe9C,oBAAoB+C,UAAUP,QAElJI,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,WACrBL,EAAK1B,YAAc,4FACnB0B,EAAK5B,cAEDkC,QAAU,IAGP,QAIPN,EAAKE,eAAe9C,qBAEpB4C,EAAKE,eAAe9C,oBAAoB+C,UAAYH,EAAKE,eAAe9C,oBAAoB+C,cAE5FH,EAAKE,eAAe9C,oBAAoB+C,UAAU3C,MAE9C+C,KAAM,oBAMVP,EAAKE,eAAe9C,uBAEpB4C,EAAKE,eAAe9C,qBAChB+C,cAGJH,EAAKE,eAAe9C,oBAAoB+C,UAAU3C,MAE9C+C,KAAM,qBAQlB5E,KAAK6E,WAAa,WAEdR,EAAKS,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgBgC,EAAKlC,KACrBhC,KAAMkE,EAAKE,iBAEX/D,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZX,EAAKS,YAAa,EAElBT,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,cACrBL,EAAK1B,YAAc,6CACnB0B,EAAK5B,cAEDC,MAAQ,OAUxB1C,KAAKiF,cAAgB,WAEjB,MAAIZ,GAAKE,eAAe5C,SAAS6C,WAA+D,IAAlDH,EAAKE,eAAe5C,SAAS6C,UAAUP,QAEjFI,EAAKI,WAAY,EACjBJ,EAAKK,cAAgB,WACrBL,EAAK1B,YAAc,2FACnB0B,EAAK5B,cAEDkC,QAAU,IAGP,QAIPN,EAAKE,eAAe5C,UAAY0C,EAAKE,eAAe5C,SAAS6C,UAE7DH,EAAKE,eAAe5C,SAAS6C,UAAU3C,MAEnC+C,KAAM,mBAMVP,EAAKE,eAAe5C,UAChB6C,cAGJH,EAAKE,eAAe5C,SAAS6C,UAAU3C,MAEnC+C,KAAM,qBAQlBjF,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAE2E,GAERd,EAAKE,eAAiBY,EAElBd,EAAKE,eAAe7C,qBAEhB2C,EAAKE,eAAe7C,mBAAmB0D,SAEnCf,EAAKE,eAAe7C,mBAAmB0D,OAAOC,cAC9ChB,EAAKE,eAAe7C,mBAAmB0D,OAAOC,YAAc,GAAIC,MAAMjB,EAAKE,eAAe7C,mBAAmB0D,OAAOC,cAGpHhB,EAAKE,eAAe7C,mBAAmB0D,OAAOG,gBAC9ClB,EAAKE,eAAe7C,mBAAmB0D,OAAOG,cAAgB,GAAID,MAAMjB,EAAKE,eAAe7C,mBAAmB0D,OAAOG,iBAK1HlB,EAAKE,eAAe7C,mBAAmB8D,gBAEnCnB,EAAKE,eAAe7C,mBAAmB8D,cAAcH,cACrDhB,EAAKE,eAAe7C,mBAAmB8D,cAAcH,YAAc,GAAIC,MAAMjB,EAAKE,eAAe7C,mBAAmB8D,cAAcH,cAGlIhB,EAAKE,eAAe7C,mBAAmB8D,cAAcD,gBACrDlB,EAAKE,eAAe7C,mBAAmB8D,cAAcD,cAAgB,GAAID,MAAMjB,EAAKE,eAAe7C,mBAAmB8D,cAAcD,kBAOhJlB,EAAKoB,sBAAwBpB,EAAKE,eAAemB,YACjDrB,EAAK9C,eAAmB,WAEpB,MAAS8C,GAAKE,eAAe/C,cAAgB6C,EAAKE,eAAe9C,qBAAuB4C,EAAKE,eAAe7C,oBAAsB2C,EAAKE,eAAe5C,UAAY0C,EAAKE,eAAe/C,aAAaI,cAAgByC,EAAKE,eAAe9C,oBAAoBG,cAAgByC,EAAKE,eAAe7C,mBAAmBE,cAAgByC,EAAKE,eAAe5C,SAASC,qBAQlX3C,QAAQC,OAAQ,OACRQ,WAAY,4BAA8B,eAAgB,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUyE,EAAcvE,EAAUwE,EAAOvE,EAAQC,EAASH,GAAQ,GAAAgG,GAAA3F,KAGjLG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IACpCnC,MAAKmC,KAAOE,EAEZ1C,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAEL,GAERwF,EAAKpB,eAAiBpE,EAEtBwF,EAAKC,UAAc,WAEf,MAASD,GAAKpB,eAAe/C,cAAgBmE,EAAKpB,eAAe9C,qBAAuBkE,EAAKpB,eAAe7C,oBAAsBiE,EAAKpB,eAAe5C,UAAYgE,EAAKpB,eAAe/C,aAAaI,cAAgB+D,EAAKpB,eAAe9C,oBAAoBG,cAAgB+D,EAAKpB,eAAe7C,mBAAmBE,cAAgB+D,EAAKpB,eAAe5C,SAASC,qBAQlX3C,QAAQC,OAAQ,OACRQ,WAAY,4BAA8B,iBAAkB,SAAU,WAAY,UAAW,SAAUmG,EAAUhG,EAAQD,EAAUE,GAAU,GAAAgG,GAAA9F,KAGpI+F,EAAO/F,IACb+F,GAAKC,QAAU,WAEXF,EAAKhB,YAAa,CAElB,IAAMmB,GAAgBJ,EAASK,eAAgBH,EAAKI,KACpDF,GAAczF,KAAM,SAAE4F,GAElBN,EAAKhB,YAAa,EAElBiB,EAAKvD,YAAa,EAClBuD,EAAKpD,YAAc,qFACnBoD,EAAKtD,cAEDC,MAAM,KARduD,SAYW,SAAEI,GAETP,EAAKhB,YAAa,EAEduB,EAAUxC,QAEVkC,EAAKvD,YAAa,EAClBuD,EAAKpD,YAAc0D,EAAUC,QAC7BP,EAAKtD,cACDK,KAAK,UAWhC7D,QAAQC,OAAQ,OACRQ,WAAY,sBAAwB,iBAAkB,SAAU,WAAY,UAAW,SAAUmG,EAAUhG,EAAQD,EAAUE,GAE1H,GAAMG,GAAaL,EAASM,IAAK,cAC3BC,EAAeP,EAASM,IAAK,YAE/BD,IAAcE,IAEdA,EAAOC,KAAKC,MAAOF,GAEnB0F,EAASvF,aAAcH,EAAKI,OAAQC,KAAM,SAAEC,GAEpCA,EAAMA,QAEY,IAAdN,EAAKO,KAELb,EAAOc,GAAI,kBAIXd,EAAOc,GAAI,gBAVvBkF,SAgBW,SAAEjF,GAEThB,EAASwD,OAAQ,cACjBxD,EAASwD,OAAQ,eAMzB,IAAM2C,GAAO/F,IAEb+F,GAAKQ,MAAQ,WAETR,EAAK3D,cAAe,CAEpB,IAAM6D,GAAgBJ,EAASU,MAAOR,EAAKI,KAC3CF,GAAczF,KAAM,SAAEgG,GAElBT,EAAK3D,cAAe,EACpB2D,EAAKzD,kBAAmB,EACxByD,EAAKxD,cAAgB,8BAEtB3C,EAAS6G,IAAK,YAAarG,KAAKsG,UAAWF,IAC3C5G,EAAS6G,IAAK,cAAc,GAEJ,IAAnBD,EAAU9F,KAEVb,EAAOc,GAAI,kBAIXd,EAAOc,GAAI,eAfnBsF,SAoBW,SAAEI,GAETN,EAAK3D,cAAe,EAEhBiE,EAAUM,YAAa,IAEvBZ,EAAKvD,YAAa,EAClBuD,EAAKpD,YAAc0D,EAAUC,QAC7BP,EAAKtD,cACDK,KAAK,UAWhC7D,QAAQC,OAAQ,OACRQ,WAAY,2BAA6B,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUE,EAAUwE,EAAOvE,EAAQC,EAASH,GAAQ,GAAAiH,GAAA5G,KAGlJG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,cAErB6F,EAAO/F,IAEbG,GAAOC,KAAKC,MAAOF,GAEnBH,KAAK6G,YAIGC,KAAM,KACNlC,KAAM,UAMNkC,KAAM,KACNlC,KAAM,YAMd5E,KAAK+G,kBAAoB,SAAEC,GAEvBrH,EAAMsH,UAAWD,GAAUxG,KAAM,SAAEL,GAE/ByG,EAAKM,OAAS/G,KAMtBH,KAAKmH,OAAS,WAEVtH,EAAOc,GAAI,cAIfX,KAAKoH,cAAgB,WAEjBR,EAAK9B,YAAa,CAElB,IAAMuC,IAEF9G,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXX,cAEIoD,KAAMmB,EAAKzE,WAAWE,aAAa8F,eAAeC,UAAY,IAAMxB,EAAKzE,WAAWE,aAAa8F,eAAeE,SAChHC,SAEIC,OAAQ3B,EAAKzE,WAAWE,aAAaiG,QAAQC,OAC7CC,KAAM5B,EAAKzE,WAAWE,aAAaiG,QAAQE,KAC3CC,IAAK7B,EAAKzE,WAAWE,aAAaiG,QAAQG,IAC1CrI,MAAOwG,EAAKzE,WAAWE,aAAaiG,QAAQlI,MAC5CyH,QAASjB,EAAKzE,WAAWE,aAAaiG,QAAQT,SAIlDM,gBAEI1C,KAAMmB,EAAKzE,WAAWE,aAAa8F,eAAeC,UAAY,IAAMxB,EAAKzE,WAAWE,aAAa8F,eAAeE,SAChHK,aAAc9B,EAAKzE,WAAWE,aAAa8F,eAAeQ,OAC1DC,eAAgBhC,EAAKzE,WAAWE,aAAa8F,eAAeU,SAC5DC,MAAOlC,EAAKzE,WAAWE,aAAa8F,eAAeW,QAQ/DtI,GAAMuI,iBAAkBb,GAAa7G,KAAM,SAAEL,GAEX,MAAzBA,EAAKA,KAAK6E,YAEV4B,EAAK9B,YAAa,EAClBjF,EAAOc,GAAI,eAIXiG,EAAKuB,SAAU,EACfvB,EAAKwB,aAAejI,EAAKA,KAAKA,KAAKmG,WAV5C3G,SAcW,SAAEQ,GAEVyG,EAAKuB,SAAU,EACfvB,EAAKwB,aAAejI,EAAKmG,cAQ3CrH,QAAQC,OAAQ,OACRQ,WAAY,qBAAuB,WAAY,QAAS,SAAU,UAAW,iBAAkB,gBAAiB,SAAUE,EAAUwE,EAAOvE,EAAQC,EAASH,EAAO0I,GAAU,GAAAC,GAAAtI,KAGtKG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAI3BC,GAAOC,KAAKC,MAAOF,GAEnBH,KAAKuI,QAAU,WAEXD,EAAKxD,YAAa,CAElB,IAAM0D,GAAOH,EAAQI,QAAWH,EAAKnC,KAAKlF,SAAWqH,EAAKnC,KAAK8B,MAAS9H,EAAKgC,MAEvEkF,GAEF9G,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXqG,KAAAA,EACArI,KAAMmI,EAAKnC,KAIfxG,GAAM+I,WAAYrB,GAAa7G,KAAM,SAAEL,GAEL,MAAzBA,EAAKA,KAAK6E,YAEVsD,EAAKxD,YAAa,EAClBwD,EAAK7D,WAAY,EACjB6D,EAAK7F,cACDC,MAAM,GAEV4F,EAAK5D,cAAgB,aACrB4D,EAAK3F,YAAL,YAAgC2F,EAAKnC,KAAKlF,SAA1C,+BAIAqH,EAAKxD,YAAa,EAClBwD,EAAK7D,WAAY,EACjB6D,EAAK7F,cACDK,KAAK,GAETwF,EAAK5D,cAAgB,2BACrB4D,EAAK3F,YAAcxC,EAAKmG,WApBjC3G,SAwBW,SAAEQ,GAETmI,EAAKxD,YAAa,EAClBwD,EAAK7D,WAAY,EACjB6D,EAAK7F,cACDK,KAAK,GAETwF,EAAK5D,cAAgB,2BACrBd,QAAQ+E,IAAKxI,GACbmI,EAAK3F,YAAcxC,EAAKmG,cAQ3CrH,QACKC,OAAQ,OACR0J,QAAS,iBAAmB,WAEzB,OAEIC,UAAW,SAAU1I,GAEjB,GAAI2I,GAAS,GAAIC,OAAO,UAAW,OAEnC,OADAD,GAAOE,OAAQ7I,GACR2I,EAAOG,QAAS,QAI3BR,QAAS,SAAUtI,EAAM+I,GAErB,GAAIJ,GAAS,GAAIC,OAAM,UAAW,OAGlC,OAFAD,GAAOK,WAAYD,EAAK,QACxBJ,EAAOE,OAAQ7I,GACR2I,EAAOM,QAAQ,YAQtCnK,QACKC,OAAQ,OACR0J,QAAS,kBAAoB,QAAS,gBAAiB,KAAM,SAAExE,EAAOiF,EAAgBC,GAKnF,GAAMC,GAAS,cAEf,QAEIjJ,aAFG,SAEWC,GAEV,GAAM4C,GAAUmG,EAAGE,OAgBnB,OAdApF,GAAMlE,IAASqJ,EAAf,qBAA4ChJ,GAAWC,KAAM,SAAEL,GAE3DgD,EAAQsG,QAAStJ,EAAKA,KAAKA,QAF/BiE,SAIW,SAAEjE,GAETgD,EAAQuG,QAEJjJ,OAAO,MAMR0C,EAAQA,SAInBoD,MAxBG,SAwBIoD,GAEH,GAAMtC,MACAlE,EAAamG,EAAGE,OAuCtB,OArCAnC,GAAWpG,SAAW0I,EAAW1I,SACjCoG,EAAWuC,SAAWP,EAAeR,UAAWc,EAAWC,UAE3DxF,EAAMyF,KAAMN,EAAS,QAASlC,GAAa7G,KAAM,SAAEL,GAE3B,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAAKI,MAEtC4C,EAAQsG,SAEJlJ,MAAOJ,EAAKA,KAAKA,KAAKI,MACtB4B,KAAOhC,EAAKA,KAAKA,KAAKgC,KACtBzB,KAAOP,EAAKA,KAAKA,KAAKO,OAM1ByC,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBK,UAAU,MAjBtBvC,SAuBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBK,UAAU,MAMXxD,EAAQA,SAInB+C,eAtEG,SAsEayD,GAEZ,GAAMtC,MACAlE,EAAamG,EAAGE,OAgCtB,OA9BAnC,GAAWpG,SAAW0I,EAAW1I,SAEjCmD,EAAMyF,KAAMN,EAAS,UAAWlC,GAAa7G,KAAM,SAAEL,GAE7B,MAAhBA,EAAK2J,OAEL3G,EAAQsG,UAIRtG,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBtC,QA7GG,SA6GMV,GAEL,GAAMgD,GAAamG,EAAGE,OA8BtB,OA5BApF,GAAMlE,IAASqJ,EAAf,UAAiCpJ,EAAKgC,KAAtC,UAAsDhC,EAAKI,OAAWC,KAAM,SAAEL,GAEtD,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,QAAStJ,EAAKA,KAAKA,KAAM,IAIjCgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBW,kBAjJG,SAiJgB3D,GAEf,GAAMgD,GAAamG,EAAGE,OA8BtB,OA5BApF,GAAMlE,IAASqJ,EAAf,qBAA4CpJ,EAAKgC,KAAjD,UAAiEhC,EAAKI,OAAWC,KAAM,SAAEL,GAEjE,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,QAAStJ,EAAKA,KAAKA,MAI3BgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBjC,6BArLG,SAqL2Bf,GAE1B,GAAMgD,GAAamG,EAAGE,OA8BtB,OA5BApF,GAAMlE,IAASqJ,EAAf,yBAAgDpJ,EAAKgC,KAArD,UAAqEhC,EAAKI,OAAWC,KAAM,SAAEL,GAErE,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,QAAStJ,EAAKA,KAAKA,MAI3BgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBG,oBAzNG,SAyNkBnD,GAEjB,GAAMgD,GAAamG,EAAGE,OAgCtB,OA9BApF,GAAMlE,IAASqJ,EAAf,uCAA8DpJ,EAAKgC,KAAnE,UAAmFhC,EAAKI,OAAWC,KAAM,SAAEL,GAEnF,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,SACJtJ,KAAMA,EAAKA,KAAKA,OAKpBgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAbnBO,SAmBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInB4G,0BA/PG,SA+PwB5J,GAEvB,GAAMgD,GAAamG,EAAGE,OAgCtB,OA9BApF,GAAMlE,IAASqJ,EAAf,qCAA4DpJ,EAAKgC,KAAjE,UAAiFhC,EAAKI,OAAWC,KAAM,SAAEL,GAEjF,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,SACJtJ,KAAMA,EAAKA,KAAKA,OAKpBgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAbnBO,SAmBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInB+B,cArSG,SAqSYnB,GAEX,GAAMZ,GAAamG,EAAGE,OA8BtB,OA5BApF,GAAMlE,IAASqJ,EAAf,gBAAuCxF,EAAO1B,eAA9C,UAAwE0B,EAAOxD,MAA/E,SAA+FwD,EAAO5B,MAAU3B,KAAM,SAAEL,GAEhG,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,QAAStJ,EAAKA,KAAKA,KAAM,IAIjCgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBD,OAzUG,SAyUKa,GAEJ,GAAMZ,GAAUmG,EAAGE,OAuCnB,OArCApF,GAAMyF,KAAMN,EAAS,WAEjBpH,KAAM4B,EAAO5B,KACb5B,MAAOwD,EAAOxD,QAEdC,KAAM,SAAEL,GAEY,MAAhBA,EAAK2J,OAEL3G,EAAQsG,SAEJzE,WAAY,MAMhB7B,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MApBnBO,SA0BW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInB8D,UAtXG,SAsXQD,GAEP,GAAM7D,GAAamG,EAAGE,OA8BtB,OA5BApF,GAAMlE,IAASqJ,EAAf,oBAA2CvC,GAAaxG,KAAM,SAAEL,GAExC,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAEjCgD,EAAQsG,QAAStJ,EAAKA,KAAKA,MAI3BgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAXnBO,SAiBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInB+E,iBA1ZG,SA0Ze8B,GAEd,GAAM7G,GAAUmG,EAAGE,QAEbnC,GAEF9G,MAAOyJ,EAAezJ,MACtB4B,KAAM6H,EAAe7H,KACrBhC,MAEIqB,aAAcwI,EAAexI,cAsCrC,OAhCA4C,GAAMyF,KAAMN,EAAS,eAAgBlC,GAAa7G,KAAM,SAAEL,GAElC,MAAhBA,EAAK2J,OAEL3G,EAAQsG,SAEJtJ,KAAMA,EAAKA,OAMfgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAfnBO,SAqBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBuF,WA9cG,SA8cSsB,GAER,GAAM7G,GAAUmG,EAAGE,QAEbnC,GAEF9G,MAAOyJ,EAAezJ,MACtBJ,KAAM6J,EAAe7J,KACrBqI,KAAMwB,EAAexB,KAoCzB,OAhCApE,GAAMyF,KAAMN,EAAS,SAAUlC,GAAa7G,KAAM,SAAEL,GAE5B,MAAhBA,EAAK2J,OAEL3G,EAAQsG,SAEJtJ,KAAMA,EAAKA,OAMfgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAfnBO,SAqBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInB4B,iBA9fG,SA8feiF,GAEd,GAAM7G,GAAUmG,EAAGE,QAEbnC,GAEF9G,MAAOyJ,EAAezJ,MACtB4B,KAAM6H,EAAe7H,KACrBhC,KAAM6J,EAAe7J,KAoCzB,OAhCAiE,GAAMqC,IAAK8C,EAAS,gBAAkBS,EAAe3H,eAAgBgF,GAAa7G,KAAM,SAAEL,GAElE,MAAhBA,EAAK2J,OAEL3G,EAAQsG,SAEJtJ,KAAMA,EAAKA,OAMfgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAfnBO,SAqBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBjB,kBA9iBG,SA8iBgB8H,GAEf,GAAM7G,GAAUmG,EAAGE,QAEbnC,GAEF9G,MAAOyJ,EAAezJ,MACtB4B,KAAM6H,EAAe7H,KAoCzB,OAhCAiC,GAAMyF,KAAMN,EAAS,wBAA0BS,EAAe3H,eAAgBgF,GAAa7G,KAAM,SAAEL,GAE3E,MAAhBA,EAAK2J,QAAkB3J,EAAKA,KAAKA,KAAK8J,eAEtC9G,EAAQsG,SAEJtJ,KAAMA,EAAKA,OAMfgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAfnBO,SAqBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,SAInBJ,oBA7lBG,SA6lBkBiH,GAEjB,GAAM7G,GAAUmG,EAAGE,QAEbnC,GAEF9G,MAAOyJ,EAAezJ,MACtB4B,KAAM6H,EAAe7H,KACrBhC,MACIuF,aAAa,EACbuE,eAAgB,IAqCxB,OAhCA7F,GAAMqC,IAAK8C,EAAS,gBAAkBS,EAAe3H,eAAgBgF,GAAa7G,KAAM,SAAEL,GAElE,MAAhBA,EAAK2J,OAEL3G,EAAQsG,SAEJtJ,KAAMA,EAAKA,OAMfgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAfnBO,SAqBW,SAAEjE,GAETgD,EAAQuG,QAEJpD,QAASnG,EAAKA,KAAKmG,QACnBzC,OAAO,MAMRV,EAAQA,aAQ/BlE,QAAQC,OAAQ,OACRQ,WAAY,qCAAuC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUwE,EAAOD,EAAcrE,EAASH,GAAQ,GAAAuK,GAAAlK,KAGxKG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IACpCnC,MAAKmC,KAAOE,EAEZ1C,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAEL,GAER+J,EAAK3F,eAAiBpE,IAI1BH,KAAKsE,YAAc,WAEf,MAAI4F,GAAK3F,eAAe9C,qBAAoF,KAA7DyI,EAAK3F,eAAe9C,oBAAoB+C,UAAUP,QAE7FiG,EAAKzF,WAAY,EACjByF,EAAKxF,cAAgB,WACrBwF,EAAKvH,YAAc,4FACnBuH,EAAKzH,cAEDkC,QAAU,IAGP,QAIPuF,EAAK3F,eAAe9C,oBAEpByI,EAAK3F,eAAe9C,oBAAoB+C,UAAU3C,MAE9C+C,KAAM,mBAMVsF,EAAK3F,eAAe9C,uBAEpByI,EAAK3F,eAAe9C,qBAChB+C,cAGJ0F,EAAK3F,eAAe9C,oBAAoB+C,UAAU3C,MAE9C+C,KAAM,qBAQlB5E,KAAK6E,WAAa,WAEdqF,EAAKpF,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgB6H,EAAK/H,KACrBhC,KAAM+J,EAAK3F,iBAEX/D,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZkF,EAAKpF,YAAa,EAElBoF,EAAKzF,WAAY,EACjByF,EAAKxF,cAAgB,cACrBwF,EAAKvH,YAAc,6CACnBuH,EAAKzH,cAEDC,MAAQ,UAYnCzD,QAAQC,OAAQ,OACRQ,WAAY,0BAA4B,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUyK,EAAGvK,EAAUwE,EAAOD,EAAcrE,EAASH,GAAQ,GAAAyK,GAAApK,KAG1KG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IACpCnC,MAAKmC,KAAOE,EAEZ1C,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAEL,GAERiK,EAAK7F,eAAiBpE,IAI1BH,KAAKsE,YAAc,WAEf,MAAI8F,GAAK7F,eAAe5C,UAAYyI,EAAK7F,eAAe5C,SAAS6C,WAA+D,IAAlD4F,EAAK7F,eAAe5C,SAAS6C,UAAUP,QAEjHmG,EAAK3F,WAAY,EACjB2F,EAAK1F,cAAgB,WACrB0F,EAAKzH,YAAc,2FACnByH,EAAK3H,cAEDkC,QAAU,IAGP,QAIPyF,EAAK7F,eAAe5C,UAAYyI,EAAK7F,eAAe5C,SAAS6C,UAE7D4F,EAAK7F,eAAe5C,SAAS6C,UAAU3C,MAEnC+C,KAAM,mBAMVwF,EAAK7F,eAAe5C,UAChB6C,cAGJ4F,EAAK7F,eAAe5C,SAAS6C,UAAU3C,MAEnC+C,KAAM,qBAQlB5E,KAAK6E,WAAa,WAEduF,EAAKtF,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgB+H,EAAKjI,KACrBhC,KAAMiK,EAAK7F,iBAEX/D,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZoF,EAAKtF,YAAa,EAElBsF,EAAK3F,WAAY,EACjB2F,EAAK1F,cAAgB,cACrB0F,EAAKzH,YAAc,6CACnByH,EAAK3H,cAEDC,MAAQ,UAYnCzD,QAAQC,OAAQ,OACRQ,WAAY,gCAAkC,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUyK,EAAGvK,EAAUwE,EAAOD,EAAcrE,EAASH,GAAQ,GAAA0K,GAAArK,KAGhLG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IACpCnC,MAAKmC,KAAOE,EAEZ1C,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAEL,GAERkK,EAAK9F,eAAiBpE,IAI1BH,KAAK6E,WAAa,WAEdwF,EAAKvF,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgBgI,EAAKlI,KACrBhC,KAAMkK,EAAK9F,iBAEX/D,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZqF,EAAKvF,YAAa,EAElBuF,EAAK5F,WAAY,EACjB4F,EAAK3F,cAAgB,cACrB2F,EAAK1H,YAAc,6CACnB0H,EAAK5H,cAEDC,MAAQ,UAYnCzD,QAAQC,OAAQ,OACRQ,WAAY,8BAAgC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUwE,EAAOD,EAAcrE,EAASH,GAAQ,GAAA2K,GAAAtK,KAE/JmC,EAAOgC,EAAahC,KAEtBhC,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BF,MAAKmC,KAAOgC,EAAahC,KAEzBhC,EAAOC,KAAKC,MAAOF,GAEnBR,EAAMuF,eAEF3E,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgBF,IAEhB3B,KAAM,SAAEL,GAERmK,EAAKhJ,WAAanB,IAItBH,KAAK6E,WAAa,WAEdyF,EAAKxF,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgBF,EAChBhC,KAAMmK,EAAKhJ,aAEXd,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZsF,EAAKxF,YAAa,EAElBwF,EAAK7F,WAAY,EACjB6F,EAAK5F,cAAgB,cACrB4F,EAAK3H,YAAc,6CACnB2H,EAAK7H,cAEDC,MAAQ,UAYnCzD,QAAQC,OAAQ,OACRQ,WAAY,oCAAsC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUE,EAAUwE,EAAOD,EAAcrE,EAASH,GAAQ,GAAA4K,GAAAvK,KAGvKG,GADeP,EAASM,IAAK,cACpBN,EAASM,IAAK,aAE3BC,GAAOC,KAAKC,MAAOF,EAEnB,IAAMkC,GAAiB8B,EAAahC,IACpCnC,MAAKmC,KAAOE,EAEZ1C,EAAMuF,eAEF7C,eAAAA,EACA9B,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,OAEX3B,KAAM,SAAEL,GAERoK,EAAKhG,eAAiBpE,EAElBoK,EAAKhG,eAAe7C,qBAEhB6I,EAAKhG,eAAe7C,mBAAmB0D,SAEnCmF,EAAKhG,eAAe7C,mBAAmB0D,OAAOC,cAC9CkF,EAAKhG,eAAe7C,mBAAmB0D,OAAOC,YAAc,GAAIC,MAAMiF,EAAKhG,eAAe7C,mBAAmB0D,OAAOC,cAGpHkF,EAAKhG,eAAe7C,mBAAmB0D,OAAOG,gBAC9CgF,EAAKhG,eAAe7C,mBAAmB0D,OAAOG,cAAgB,GAAID,MAAMiF,EAAKhG,eAAe7C,mBAAmB0D,OAAOG,iBAK1HgF,EAAKhG,eAAe7C,mBAAmB8D,gBAEnC+E,EAAKhG,eAAe7C,mBAAmB8D,cAAcH,cACrDkF,EAAKhG,eAAe7C,mBAAmB8D,cAAcH,YAAc,GAAIC,MAAMiF,EAAKhG,eAAe7C,mBAAmB8D,cAAcH,cAGlIkF,EAAKhG,eAAe7C,mBAAmB8D,cAAcD,gBACrDgF,EAAKhG,eAAe7C,mBAAmB8D,cAAcD,cAAgB,GAAID,MAAMiF,EAAKhG,eAAe7C,mBAAmB8D,cAAcD,oBAUpJvF,KAAK6E,WAAa,WAEd0F,EAAKzF,YAAa,EAElBnF,EAAMoF,kBAEFxE,MAAOJ,EAAKI,MACZ4B,KAAMhC,EAAKgC,KACXE,eAAgBkI,EAAKpI,KACrBhC,KAAMoK,EAAKhG,iBAEX/D,KAAM,SAAEuD,GAEuB,MAA3BA,EAAO5D,KAAK6E,aAEZuF,EAAKzF,YAAa,EAElByF,EAAK9F,WAAY,EACjB8F,EAAK7F,cAAgB,cACrB6F,EAAK5H,YAAc,6CACnB4H,EAAK9H,cAEDC,MAAQ","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n           } );\n\n           $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n           } );\n\n           this.sortType = 'isConfirmed';\n           this.sortReverse = false;\n\n           this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n           };\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           if( isLoggedIn && data ) {\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n            //    $state.go( 'home' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n\n           this.guid = conferenceGuid;\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates = this.conferenceData.delegateInformation.delegates || [];\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n           this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n            let  data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $restApi.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $cookies.remove( 'isLoggedIn' );\n                   $cookies.remove( 'loginData' );\n\n               } );\n\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               self.isProcessing = true;\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   self.isProcessing = false;\n                   self.hasButtonMessage = true;\n                   self.buttonMessage = \"Redirecting to dashboard...\";\n\n                  $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                  $cookies.put( 'isLoggedIn', true );\n\n                   if( dataLogin.role === 1 ) {\n\n                       $state.go( 'dashboardAdmin' );\n\n                   } else {\n\n                       $state.go( 'dashboard' );\n\n                   }\n\n\n               } ).catch( ( dataError ) => {\n\n                   self.isProcessing = false;\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function( $cookies, $http, $state, $window, $rest, $crypto ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: this.user\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   console.log( data );\n                   this.messageText = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        // const apiUrl = 'http://api.app.beta.dsmun.com';\n        // const apiUrl = 'http://localhost:3345';\n\n        const apiUrl = '{{@API_URL}}';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}