{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","_this","this","isLoggedIn","get","data","JSON","parse","GetUser","then","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","push","sortType","sortReverse","ChangeSort","sortTypeNew","ConfirmConference","guid","isProcessing","token","conferenceGuid","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","err","red","UnconfirmConference","go","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","log","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddDelegate","conferenceData","delegates","isMessage","messageHeader","yellow","name","UpdateForm","processing","UpdateConference","statusCode","AddGADelegate","GetConference","dataDb","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","self","Execute","resultPromise","ForgotPassword","user","dataForgot","dataError","error","message","Login","dataLogin","put","stringify","role","loggedIn","_this7","countries","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","factory","getSha512","shaObj","jsSHA","update","getHash","$cryptoService","$q","apiUrl","userObject","defer","password","post","status","resolve","reject","GetUnconfirmedConferences","confUserObject","_this8","_","_this9","_this10","medicalHistory","_this11","_this12","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', function( $rest, $cookies, $state, $window ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n           } );\n\n           $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = ( () => {\n\n                       return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                   } )();\n\n                   this.allConferences.push( conference );\n\n               } );\n\n           } );\n\n           this.sortType = 'isConfirmed';\n           this.sortReverse = false;\n\n           this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n           };\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n\n           this.guid = conferenceGuid;\n\n           this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n           this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( dataDb ) => {\n\n               this.conferenceData = dataDb;\n\n               this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n               this.areFormsFilled = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               self.isProcessing = true;\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   self.isProcessing = false;\n                   self.hasButtonMessage = true;\n                   self.buttonMessage = \"Redirecting to dashboard...\";\n\n                  $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                  $cookies.put( 'isLoggedIn', true );\n\n                   if( dataLogin.role === 1 ) {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboardAdmin' );\n\n                   } else {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboard' );\n\n                   }\n\n\n               } ).catch( ( dataError ) => {\n\n                   self.isProcessing = false;\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        // const apiUrl = 'http://api.app.beta.dsmun.com';\n        const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: true,\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}