{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","_this","this","isLoggedIn","get","data","JSON","parse","GetUser","then","_ref","school_name","teacher_escort","username","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","isFormFilled","delegateInformation","travelArrangements","gaCrisis","push","go","$window","_this2","showLogout","Logout","promise","remove","err","location","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","dataOut","console","log","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","conferenceGuid","guid","GetConference","token","conferenceData","isAllDone","$restApi","_this5","self","Execute","processing","resultPromise","ForgotPassword","user","dataForgot","hasMessage","messageText","messageClass","blue","dataError","error","message","red","Login","isProcessing","dataLogin","hasButtonMessage","buttonMessage","put","stringify","role","loggedIn","_this6","countries","code","name","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","statusCode","isError","errorMessage","factory","getSha512","shaObj","jsSHA","update","getHash","$cryptoService","$q","apiUrl","userObject","defer","password","post","status","resolve","reject","GetUnconfirmedConferences","confUserObject","UpdateConference","_this7","AddDelegate","delegates","isMessage","messageHeader","yellow","UpdateForm","_","_this8","_this9","medicalHistory","_this10","_this11","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboard-admin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUser( data ).then( ( { school_name, teacher_escort, username } ) => {\n\n               this.data = {\n\n                   school_name,\n                   teacher_escort,\n                   username,\n\n               };\n\n           } );\n\n           $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n               this.allConferences = [];\n\n               dbData.map( ( conference ) => {\n\n                   conference.areFormsFilled = conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled;\n                   this.allConferences.push( conference );\n\n               } );\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               self.isProcessing = true;\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   self.isProcessing = false;\n                   self.hasButtonMessage = true;\n                   self.buttonMessage = \"Redirecting to dashboard...\";\n\n                  $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                  $cookies.put( 'isLoggedIn', true );\n\n                   if( dataLogin.role === 1 ) {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboard-admin' );\n\n                   } else {\n\n\n                    //    $window.location.reload();\n                       $state.go( 'dashboard' );\n\n                   }\n\n\n               } ).catch( ( dataError ) => {\n\n                   self.isProcessing = false;\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.beta.dsmun.com';\n        // const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}