{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","$scope","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","sortType","sortReverse","ChangeSort","sortTypeNew","RefreshView","isProcessing","processingOne","processingTwo","GetAllUsers","users","filter","user","push","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","DeleteConference","conferenceGuid","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_","_this4","schoolGuid","GetAllotments","committee","conferenceData","countryAllotment","allotments","retVal","allotment","name","AddCountryAllotment","country","PostNotification","notification","postData","PostNewNotification","isMessage","messageHeader","green","AddGADelegate","delegates","yellow","UpdateView","RemoveGADelegate","index","splice","AddDelegate","RemoveDelegate","UpdateForm","processing","log","UpdateConference","statusCode","isReloading","GetConference","dataDb","fieldClasses","two fields","field","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","shouldShowNoDelegatesMessage","_this5","GetNotifications","notifications","isAllDone","MarkAsViewed","notificationId","elem","element","closest","addClass","alert","$restApi","_this6","Execute","resultPromise","ForgotPassword","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","countries","code","populateStateList","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_this9","NewUser","hash","getHmac","username","assign","metadata","CreateUser","generatedPassword","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","notificationData","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","items","slice","reverse","_this10","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:schoolGuid/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               })\n               .state( 'userWiseAllocation', {\n\n                   url: '/dashboard/users/allocations',\n                   templateUrl: 'app/templates/user-wise-allocation.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', '$scope', function( $rest, $cookies, $state, $window, $scope ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isProcessing = true;\n\n                let processingOne = true\n                  , processingTwo = true;\n\n                $rest.GetAllUsers( {\n\n                   token: data.token,\n\n                } ).then( ( data ) => {\n\n                    processingOne = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.users = [];\n                   data.filter( ( user ) => {\n\n                       if( user.role !== 1 ) this.users.push( user );\n\n                   } );\n\n                } );\n\n                $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n                    processingTwo = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.allConferences = [];\n\n                   dbData.map( ( conference ) => {\n\n                       conference.areFormsFilled = ( () => {\n\n                           return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                       } )();\n\n                       this.allConferences.push( conference );\n\n                   } );\n\n                } );\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } );\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', 'lodash', function( $stateParams, $cookies, $http, $state, $window, $rest, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n            this.schoolGuid = $stateParams.schoolGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.GetAllotments = ( committee ) => {\n\n                if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                    return [];\n                }\n\n                let retVal = [];\n\n                this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                    if( committee === allotment.name ) {\n\n                        retVal.push( allotment );\n\n                    }\n\n                } );\n\n                return retVal;\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               this.conferenceData.countryAllotment = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.countryAllotment ) ? ( ( this.conferenceData.countryAllotment.allotments ) ? this.conferenceData.countryAllotment : { allotments: [] } ) : { allotments: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.countryAllotment.allotments.push( {\n\n                   name: '',\n                   country: ''\n\n               } );\n\n            };\n\n            this.PostNotification = () => {\n\n                this.isProcessing = true;\n                this.notification.guid = $stateParams.schoolGuid;\n\n                const postData =  {\n\n                    guid: data.guid,\n                    token: data.token,\n                    data: this.notification\n\n                };\n\n                $rest.PostNewNotification( postData ).then( ( data ) => {\n\n                    this.isProcessing = false;\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Success!\";\n                    this.messageText = \"A notification was successfully sent to the respective school.\";\n                    this.messageClass = {\n\n                        'green': true,\n\n                    };\n\n                    this.notification = {};\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Error!\";\n                    this.messageText = \"There was an error in sending the notification.\";\n                    this.messageClass = {\n\n                        'red': true,\n\n                    };\n\n                } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length >= 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n            };\n\n            this.RemoveGADelegate = ( index ) => {\n\n                if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length <= 0 ) {\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Warning!\";\n                    this.messageText = \"You can not remove any more delegates.\";\n                    this.messageClass = {\n\n                        'yellow': true,\n\n                    };\n\n                    return false;\n\n                }\n\n                this.conferenceData.gaCrisis = ( () => {\n\n                    return (\n\n                        ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                    )\n\n                } )();\n\n                this.conferenceData.gaCrisis.delegates.splice( index, 1 );\n                this.UpdateView();\n\n            };\n\n            this.AddDelegate = () => {\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n            };\n\n            this.RemoveDelegate = ( index ) => {\n\n                if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length <= 0 ) {\n\n                    this.isMessage = true;\n                    this.messageHeader = \"Warning!\";\n                    this.messageText = \"You can not remove any more delegates.\";\n                    this.messageClass = {\n\n                        'yellow': true,\n\n                    };\n\n                    return false;\n\n                }\n\n                this.conferenceData.delegateInformation = ( () => {\n\n                    return (\n\n                        ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                    )\n\n                } )();\n\n                this.conferenceData.delegateInformation.delegates.splice( index, 1 );\n                this.UpdateView();\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               console.log( this.conferenceData );\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isReloading = true;\n\n                $rest.GetConference( {\n\n                   conferenceGuid,\n                   token: data.token,\n                   guid: data.guid,\n\n                } ).then( ( dataDb ) => {\n\n                   this.conferenceData = dataDb;\n                   this.isReloading = false;\n\n                   this.fieldClasses = {\n\n                       'two fields': ( this.conferenceData.countryAllotment ),\n                       'field': ( !this.conferenceData.countryAllotment )\n\n                   };\n\n                   if( this.conferenceData.travelArrangements ) {\n\n                       if( this.conferenceData.travelArrangements.onward ) {\n\n                           if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                               this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                               this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                           }\n\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                           if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                           }\n\n                       }\n\n                   }\n\n                   this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n                   this.areFormsFilled = ( () => {\n\n                       return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n                   } )();\n\n                } );\n\n            };\n\n            this.UpdateView = () => {\n\n                this.shouldShowNoDelegatesMessage = ( () => {\n\n                    if( this.conferenceData.delegateInformation ) {\n\n                        if( this.conferenceData.delegateInformation.delegates ) {\n\n                            return ( this.conferenceData.delegateInformation.delegates.length === 0 );\n\n                        } else { return false; }\n\n                    } else { return false; }\n\n                } )();\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetNotifications( {\n\n                guid: data.guid,\n                token: data.token\n\n            } ).then( data => {\n\n                this.notifications = data;\n\n            } );\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n            this.MarkAsViewed = ( notificationId ) => {\n\n                $rest.MarkAsViewed( {\n\n                    notificationId,\n                    guid: data.guid,\n                    token: data.token\n\n                } ).then( ( data ) => {\n\n                    const elem = angular.element( `#${ notificationId }` ).closest( '.message' );\n                    elem.addClass( 'successfully-saved' ).addClass( 'hide-opacity' );\n\n                } ).catch( ( err ) => {\n\n                    alert( 'An error was encountered. Please try again later.' );\n\n                } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: _.assign( this.user, this.metadata )\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                        if( data.data.data && data.data.data.generatedPassword ) {\n\n                            this.messageText += ` The generated password is ${ data.data.data.generatedPassword }.`;\n\n                        }\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ViewUserWiseController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            \n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/reset', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            PostNewNotification( notificationData ) {\n\n                const promise    = $q.defer();\n\n                $http.post( apiUrl + '/notifications', {\n\n                    token: notificationData.token,\n                    data: notificationData.data,\n                    guid: notificationData.guid,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetNotifications( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/notifications/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            MarkAsViewed( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/notifications/${ data.guid }/${ data.notificationId }/viewed?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.UpdateView();\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.GetAllotments = ( committee ) => {\n\n               if( !this.conferenceData.countryAllotment || !this.conferenceData.countryAllotment.allotments ) {\n                   return [];\n               }\n\n               let retVal = [];\n\n               this.conferenceData.countryAllotment.allotments.map( ( allotment ) => {\n\n                   if( committee === allotment.name ) {\n\n                       retVal.push( allotment );\n\n                   }\n\n               } );\n\n               return retVal;\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length >= 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n           };\n\n           this.RemoveDelegate = ( index ) => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length <= 0 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not remove any more delegates.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.splice( index, 1 );\n               this.UpdateView();\n\n           };\n\n           this.UpdateView = () => {\n\n               this.shouldShowNoDelegatesMessage = ( () => {\n\n                   if( this.conferenceData.delegateInformation ) {\n\n                       if( this.conferenceData.delegateInformation.delegates ) {\n\n                           return ( this.conferenceData.delegateInformation.delegates.length === 0 );\n\n                       } else { return false; }\n\n                   } else { return false; }\n\n               } )();\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n               this.UpdateView();\n\n           } );\n\n           this.RemoveDelegate = ( index ) => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length <= 0 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not remove any more delegates.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.splice( index, 1 );\n               this.UpdateView();\n\n           };\n\n           this.UpdateView = () => {\n\n               this.shouldShowNoDelegatesMessage = ( () => {\n\n                   if( this.conferenceData.gaCrisis ) {\n\n                       if( this.conferenceData.gaCrisis.delegates ) {\n\n                           return ( this.conferenceData.gaCrisis.delegates.length === 0 );\n\n                       } else { return false; }\n\n                   } else { return false; }\n\n               } )();\n\n           };\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length >= 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n               this.UpdateView();\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}