{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$rest","$cookies","$state","$window","$scope","_this","this","isLoggedIn","get","data","JSON","parse","IsValidToken","token","then","valid","role","go","err","sortType","sortReverse","ChangeSort","sortTypeNew","RefreshView","isProcessing","processingOne","processingTwo","GetAllUsers","users","filter","user","push","GetAllConferencesForAllUsers","dbData","allConferences","map","conference","areFormsFilled","registration","delegateInformation","travelArrangements","gaCrisis","isFormFilled","DeleteConference","conferenceGuid","guid","res","hasButtonMessage","buttonMessage","hasMessage","messageClass","blue","messageText","location","reload","red","ConfirmConference","UnconfirmConference","_this2","showLogout","Logout","promise","remove","_this3","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","error","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this4","AddCountryAllotment","conferenceData","countryAllotment","countries","isMessage","messageHeader","yellow","name","AddAnnouncement","announcements","notifications","text","AddGADelegate","delegates","AddDelegate","UpdateForm","processing","UpdateConference","statusCode","isReloading","GetConference","dataDb","fieldClasses","two fields","field","onward","arrivalDate","Date","departureDate","returnJourney","isConferenceConfirmed","isConfirmed","_this5","isAllDone","$restApi","_this6","Execute","resultPromise","ForgotPassword","dataForgot","dataError","message","_this7","Login","dataLogin","put","stringify","loggedIn","_this8","self","code","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","isError","errorMessage","$crypto","_","_this9","NewUser","hash","getHmac","username","assign","metadata","CreateUser","generatedPassword","items","slice","reverse","factory","getSha512","shaObj","jsSHA","update","getHash","key","setHMACKey","getHMAC","$q","checkLogin","defer","resolve","reject","getLoginData","$cryptoService","apiUrl","userObject","password","post","status","GetUnconfirmedConferences","confUserObject","confObject","confirmationId","_this10","_this11","_this12","_this13","_this14"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               })\n               .state( 'dashboardAdmin', {\n\n                   url: '/dashboard/admin',\n                   templateUrl: 'app/templates/dashboard-admin.html',\n\n               })\n               .state( 'editConferenceAdmin', {\n\n                   url: '/dashboard/edit/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference-admin.html',\n\n               })\n               .state( 'addNewUser', {\n\n                   url: '/dashboard/users/new',\n                   templateUrl: 'app/templates/new-user.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n        .controller( 'AdministratorDashboardController', [ 'RestApiService', '$cookies', '$state', '$window', '$scope', function( $rest, $cookies, $state, $window, $scope ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( valid.valid ) {\n\n                       if( data.role === 1 ) {\n\n                           $state.go( 'dashboardAdmin' );\n\n                       } else {\n\n                           $state.go( 'dashboard' );\n\n                       }\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.sortType = 'isConfirmed';\n            this.sortReverse = false;\n\n            this.ChangeSort = ( sortTypeNew ) => {\n\n               if( sortTypeNew === this.sortType ) {\n                   this.sortReverse = !this.sortReverse;\n               } else {\n                   this.sortType = sortTypeNew;\n               }\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isProcessing = true;\n\n                let processingOne = true\n                  , processingTwo = true;\n\n                $rest.GetAllUsers( {\n\n                   token: data.token,\n\n                } ).then( ( data ) => {\n\n                    processingOne = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.users = [];\n                   data.filter( ( user ) => {\n\n                       if( user.role !== 1 ) this.users.push( user );\n\n                   } );\n\n                } );\n\n                $rest.GetAllConferencesForAllUsers( data ).then( ( dbData ) => {\n\n                    processingTwo = false;\n                    this.isProcessing = ( processingOne || processingTwo );\n\n                   this.allConferences = [];\n\n                   dbData.map( ( conference ) => {\n\n                       conference.areFormsFilled = ( () => {\n\n                           return ( conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled )\n\n                       } )();\n\n                       this.allConferences.push( conference );\n\n                   } );\n\n                } );\n\n            };\n\n            this.DeleteConference  = ( conferenceGuid ) => {\n\n                this.isProcessing = true;\n\n                $rest.DeleteConference( {\n\n                    guid: data.guid,\n                    token: data.token,\n                    conferenceGuid,\n\n                } ).then( ( res ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Conference confirmed!\";\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        blue: true\n                    };\n                    this.messageText = \"Conference confirmed!\";\n\n                    $window.location.reload();\n\n                } ).catch( ( err ) => {\n\n                    this.isProcessing = false;\n\n                    this.hasMessage = true;\n                    this.messageClass = {\n                        red: true\n                    };\n                    this.messageText = \"An error was encountered while executing that operation!\";\n\n                } );\n\n            };\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference confirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n                   $window.location.reload();\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.UnconfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.UnconfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasButtonMessage = true;\n                   this.buttonMessage = \"Conference unconfirmed!\";\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference unconfirmed!\";\n\n                   $window.location.reload();\n\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                    this.showLogout = false;\n                    $state.go( 'home' );\n\n                } );\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n            } );\n\n            let dataPromise = $rest.GetUser( data );\n            dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n\n            } );\n\n            dataPromise = $rest.GetAllConferences( data );\n            dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n            } ).catch( ( data ) => {\n\n               console.error( 'The application failed to load with the provided parameters; trying to reload internal state.' );\n               $state.go( 'home' );\n\n            } );\n\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceAdminController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n\n            this.guid = conferenceGuid;\n\n            this.ConfirmConference = ( guid ) => {\n\n               this.isProcessing = true;\n\n               $rest.ConfirmConference( {\n\n                   guid: data.guid,\n                   token: data.token,\n                   conferenceGuid: guid\n\n               } ).then( ( dbData ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       blue: true\n                   };\n                   this.messageText = \"Conference confirmed!\";\n\n               } ).catch( ( err ) => {\n\n                   this.isProcessing = false;\n\n                   this.hasMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageText = \"An error was encountered while executing that operation!\";\n\n               } );\n\n            };\n\n            this.AddCountryAllotment = () => {\n\n               if( this.conferenceData.countryAllotment && this.conferenceData.countryAllotment.countries && this.conferenceData.countryAllotment.countries.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.countryAllotment = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.countryAllotment ) ? ( ( this.conferenceData.countryAllotment.countries ) ? this.conferenceData.countryAllotment : { countries: [] } ) : { countries: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.countryAllotment.countries.push( {\n\n                   name: 'Country Name'\n\n               } );\n\n            };\n\n            this.AddAnnouncement = () => {\n\n                this.conferenceData.announcements = this.conferenceData.announcements || {\n                    notifications: []\n                };\n\n                this.conferenceData.announcements.notifications.push( {\n\n                    text: 'Notification',\n                    name: 'New Notification'\n\n                } );\n\n            };\n\n            this.AddGADelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n            };\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n            this.RefreshView = () => {\n\n                this.isReloading = true;\n\n                $rest.GetConference( {\n\n                   conferenceGuid,\n                   token: data.token,\n                   guid: data.guid,\n\n                } ).then( ( dataDb ) => {\n\n                   this.conferenceData = dataDb;\n                   this.isReloading = false;\n\n                   this.fieldClasses = {\n\n                       'two fields': ( this.conferenceData.countryAllotment ),\n                       'field': ( !this.conferenceData.countryAllotment )\n\n                   };\n\n                   if( this.conferenceData.travelArrangements ) {\n\n                       if( this.conferenceData.travelArrangements.onward ) {\n\n                           if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                               this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                               this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                           }\n\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                           if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                           }\n\n                           if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                               this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                           }\n\n                       }\n\n                   }\n\n                   this.isConferenceConfirmed = this.conferenceData.isConfirmed;\n                   this.areFormsFilled = ( () => {\n\n                       return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n                   } )();\n\n                } );\n\n            };\n\n            this.RefreshView();\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = ( () => {\n\n                   return ( this.conferenceData.registration && this.conferenceData.delegateInformation && this.conferenceData.travelArrangements && this.conferenceData.gaCrisis && this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled )\n\n               } )();\n\n            } );\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n            this.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( this.user );\n\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   this.hasMessage = true;\n                   this.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   this.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       this.hasMessage = true;\n                       this.messageText = dataError.message;\n                       this.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $rest, $state, $cookies, $window ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.Login = () => {\n\n                this.isProcessing = true;\n\n                const resultPromise = $rest.Login( this.user );\n\n                resultPromise.then( ( dataLogin ) => {\n\n                    this.hasButtonMessage = true;\n                    this.buttonMessage = \"Redirecting to dashboard...\";\n\n                    $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                    $cookies.put( 'isLoggedIn', true );\n\n                    if( dataLogin.role === 1 ) {\n\n                        $state.go( 'dashboardAdmin' );\n\n                    } else {\n\n                        $state.go( 'dashboard' );\n\n                    }\n\n                } ).catch( ( dataError ) => {\n\n                    this.isProcessing = false;\n\n                    if( dataError.loggedIn === false ) {\n\n                        this.hasMessage = true;\n                        this.messageText = dataError.message;\n                        this.messageClass = {\n                            red: true\n                        }\n\n                    }\n\n                } );\n\n            }\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n            ];\n\n            this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n            };\n\n            this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n            };\n\n            this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'NewUserController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', 'lodash', function( $cookies, $http, $state, $window, $rest, $crypto, _ ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data      = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const self = this;\n\n            this.NewUser = () => {\n\n               this.processing = true;\n\n               const hash = $crypto.getHmac( ( this.user.username + this.user.email ), data.guid );\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   hash,\n                   data: _.assign( this.user, this.metadata )\n\n               };\n\n               $rest.CreateUser( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            blue: true\n                        };\n                        this.messageHeader = \"User Added\";\n                        this.messageText = `The user ${ this.user.username } was successfully created.`;\n\n                        if( data.data.data && data.data.data.generatedPassword ) {\n\n                            this.messageText += ` The generated password is ${ data.data.data.generatedPassword }.`;\n\n                        }\n\n                    } else {\n\n                        this.processing = false;\n                        this.isMessage = true;\n                        this.messageClass = {\n                            red: true\n                        };\n                        this.messageHeader = \"An error was encountered\";\n                        this.messageText = data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                   this.processing = false;\n                   this.isMessage = true;\n                   this.messageClass = {\n                       red: true\n                   };\n                   this.messageHeader = \"An error was encountered\";\n                   this.messageText = data.message;\n\n               } );\n\n            };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .filter( 'reverse', () => {\n\n        return ( items ) => {\n\n            return items.slice().reverse();\n\n        };\n\n    } );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            },\n\n            getHmac: function( data, key ) {\n\n                var shaObj = new jsSHA('SHA-512', \"TEXT\");\n                shaObj.setHMACKey( key, \"TEXT\");\n                shaObj.update( data );\n                return shaObj.getHMAC(\"HEX\");\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'LoginService', [ '$cookies', 'RestApiService', '$state', '$q', function( $cookies, $rest, $state, $q ) {\n\n        return {\n\n            checkLogin() {\n\n                let isLoggedIn = $cookies.get( 'isLoggedIn' )\n                    , data     = ( $cookies.get( 'loginData' ) )\n                    , promise  = $q.defer();\n\n                if( isLoggedIn && data ) {\n\n                    data = JSON.parse( data );\n\n                    $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                        if( valid.valid ) {\n\n                            promise.resolve( {\n                                valid: true,\n                                data,\n                            } );\n\n                        }\n\n                    } ).catch( ( err ) => {\n\n                        promise.reject( {\n                            valid: true,\n                        } );\n\n                    } );\n\n                }\n\n                return promise.promise;\n\n            },\n\n            getLoginData() {\n\n                const data = JSON.parse( $cookies.get( 'loginData' ) );\n                return ( data );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.dsmun.com';\n\n        return {\n\n            IsValidToken( token ) {\n\n                const promise = $q.defer();\n\n                $http.get( `${ apiUrl }/auth/token/valid/${ token }` ).then( ( data ) => {\n\n                    promise.resolve( data.data.data );\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        valid: false,\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/reset', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferencesForAllUsers( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/all?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            DeleteConference( confObject ) {\n\n                const promise = $q.defer();\n\n                $http.delete( `${ apiUrl }/conferences/${ confObject.conferenceGuid }?token=${ confObject.token }&guid=${ confObject.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 || data.status === 201 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateUser( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    data: confUserObject.data,\n                    hash: confUserObject.hash\n\n                };\n\n                $http.post( apiUrl + '/users', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ConfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n\n                };\n\n                $http.post( apiUrl + '/conferences/confirm/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.confirmationId ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UnconfirmConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n                        isConfirmed: false,\n                        confirmationId: '',\n                    }\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn       = $cookies.get( 'isLoggedIn' )\n               , data           = $cookies.get( 'loginData' )\n               , conferenceGuid = $stateParams.guid;\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.fieldClasses = {\n\n                   'two fields': ( this.conferenceData.countryAllotment ),\n                   'field': ( !this.conferenceData.countryAllotment )\n\n               };\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.delegateInformation = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.delegateInformation ) ? ( ( this.conferenceData.delegateInformation.delegates ) ? this.conferenceData.delegateInformation : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.delegateInformation.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates && this.conferenceData.gaCrisis.delegates.length === 7 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 7.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n\n                   return false;\n\n               }\n\n               this.conferenceData.gaCrisis = ( () => {\n\n                   return (\n\n                       ( this.conferenceData.gaCrisis ) ? ( ( this.conferenceData.gaCrisis.delegates ) ? this.conferenceData.gaCrisis : { delegates: [] } ) : { delegates: [] }\n\n                   )\n\n               } )();\n\n               this.conferenceData.gaCrisis.delegates.push( {\n\n                   name: 'Delegate Name'\n\n               } );\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n           if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n           }\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            const guid = $stateParams.guid;\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            this.guid = $stateParams.guid;\n\n            $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n            } ).then( ( data ) => {\n\n               this.conference = data;\n\n            } );\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n\nangular.module( 'app' )\n        .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n            let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data     = $cookies.get( 'loginData' );\n\n            if( isLoggedIn && data ) {\n\n               data = JSON.parse( data );\n\n               $rest.IsValidToken( data.token ).then( ( valid ) => {\n\n                   if( !valid.valid ) {\n\n                       $state.go( 'home' );\n\n                   }\n\n               } ).catch( ( err ) => {\n\n                   $state.go( 'home' );\n\n               } );\n\n            }\n\n            const conferenceGuid = $stateParams.guid;\n            this.guid = conferenceGuid;\n\n            $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n            } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements ) {\n\n                   if( this.conferenceData.travelArrangements.onward ) {\n\n                       if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                           this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                           this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n                       }\n\n                   }\n\n                   if( this.conferenceData.travelArrangements.returnJourney ) {\n\n                       if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n                       }\n\n                       if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                           this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n                       }\n\n                   }\n\n               }\n\n            } );\n\n\n            this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n            };\n\n       } ] );\n"]}