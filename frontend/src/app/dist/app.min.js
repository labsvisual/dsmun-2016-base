'use strict';

angular.module('app', ['ui.router', 'ngCookies', 'ngLodash']);

angular.module('app');

angular.module('app').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {

    $urlRouterProvider.otherwise('/');

    $stateProvider.state('home', {

        url: '/',
        templateUrl: 'app/templates/homepage.html'

    }).state('forgot', {

        url: '/forgot',
        templateUrl: 'app/templates/forgot-password.html'

    }).state('dashboard', {

        url: '/dashboard',
        templateUrl: 'app/templates/dashboard.html'

    }).state('newConference', {

        url: '/conferences/new',
        templateUrl: 'app/templates/new-conference.html'

    }).state('editConference', {

        url: '/conferences/:guid',
        templateUrl: 'app/templates/edit-conference.html'

    }).state('registrationForm', {

        url: '/conferences/:guid/registration',
        templateUrl: 'app/templates/forms/registration.html'

    }).state('delegateInformationForm', {

        url: '/conferences/:guid/delegates',
        templateUrl: 'app/templates/forms/delegate-information.html'

    }).state('travelArrangementsForm', {

        url: '/conferences/:guid/travel',
        templateUrl: 'app/templates/forms/travel-arrangements.html'

    }).state('gaCrisisForm', {

        url: '/conferences/:guid/ga',
        templateUrl: 'app/templates/forms/ga-crisis.html'

    }).state('dashboardAdmin', {

        url: '/dashboard/admin',
        templateUrl: 'app/templates/dashboard-admin.html'

    }).state('editConferenceAdmin', {

        url: '/dashboard/edit/conferences/:guid',
        templateUrl: 'app/templates/edit-conference-admin.html'

    }).state('addNewUser', {

        url: '/dashboard/users/new',
        templateUrl: 'app/templates/new-user.html'

    });
}]);

angular.module('app').controller('AdministratorDashboardController', ['RestApiService', '$cookies', '$state', '$window', function ($rest, $cookies, $state, $window) {
    var _this = this;

    var isLoggedIn = $cookies.get('isLoggedIn'),
        data = $cookies.get('loginData');

    if (isLoggedIn && data) {

        data = JSON.parse(data);

        $rest.IsValidToken(data.token).then(function (valid) {

            if (valid.valid) {

                if (data.role === 1) {

                    $state.go('dashboardAdmin');
                } else {

                    $state.go('dashboard');
                }
            }
        }).catch(function (err) {

            $state.go('home');
        });
    }

    $rest.GetUser(data).then(function (_ref) {
        var school_name = _ref.school_name;
        var teacher_escort = _ref.teacher_escort;
        var username = _ref.username;


        _this.data = {

            school_name: school_name,
            teacher_escort: teacher_escort,
            username: username

        };
    });

    $rest.GetAllConferencesForAllUsers(data).then(function (dbData) {

        _this.allConferences = [];

        dbData.map(function (conference) {

            conference.areFormsFilled = function () {

                return conference.registration && conference.delegateInformation && conference.travelArrangements && conference.gaCrisis && conference.registration.isFormFilled && conference.delegateInformation.isFormFilled && conference.travelArrangements.isFormFilled && conference.gaCrisis.isFormFilled;
            }();

            _this.allConferences.push(conference);
        });
    });

    this.sortType = 'isConfirmed';
    this.sortReverse = false;

    this.ChangeSort = function (sortTypeNew) {

        if (sortTypeNew === _this.sortType) {
            _this.sortReverse = !_this.sortReverse;
        } else {
            _this.sortType = sortTypeNew;
        }
    };

    this.ConfirmConference = function (guid) {

        _this.isProcessing = true;

        $rest.ConfirmConference({

            guid: data.guid,
            token: data.token,
            conferenceGuid: guid

        }).then(function (dbData) {

            _this.isProcessing = false;

            _this.hasButtonMessage = true;
            _this.buttonMessage = "Conference confirmed!";
            _this.hasMessage = true;
            _this.messageClass = {
                blue: true
            };
            _this.messageText = "Conference confirmed!";

            $window.location.reload();
        }).catch(function (err) {

            _this.isProcessing = false;

            _this.hasMessage = true;
            _this.messageClass = {
                red: true
            };
            _this.messageText = "An error was encountered while executing that operation!";
        });
    };

    this.UnconfirmConference = function (guid) {

        _this.isProcessing = true;

        $rest.UnconfirmConference({

            guid: data.guid,
            token: data.token,
            conferenceGuid: guid

        }).then(function (dbData) {

            _this.isProcessing = false;

            _this.hasButtonMessage = true;
            _this.buttonMessage = "Conference unconfirmed!";
            _this.hasMessage = true;
            _this.messageClass = {
                blue: true
            };
            _this.messageText = "Conference unconfirmed!";

            $window.location.reload();
        }).catch(function (err) {

            _this.isProcessing = false;

            _this.hasMessage = true;
            _this.messageClass = {
                red: true
            };
            _this.messageText = "An error was encountered while executing that operation!";
        });
    };
}]);

angular.module('app').controller('BasePageController', ['$cookies', '$state', '$window', 'RestApiService', function ($cookies, $state, $window, $rest) {
    var _this2 = this;

    var data = $cookies.get('loginData');
    this.showLogout = $cookies.get('isLoggedIn') && data;
    this.Logout = function () {

        var promise = $rest.Logout(JSON.parse(data));
        promise.then(function (data) {

            $cookies.remove('isLoggedIn');
            $cookies.remove('loginData');
        }).catch(function (err) {

            $cookies.remove('isLoggedIn');
            $cookies.remove('loginData');
        });

        _this2.showLogout = false;
        $window.location = "/";
    };
}]);

angular.module('app').controller('DashboardController', ['RestApiService', '$cookies', '$state', function ($rest, $cookies, $state) {
    var _this3 = this;

    var isLoggedIn = $cookies.get('isLoggedIn'),
        data = $cookies.get('loginData');

    if (isLoggedIn && data) {

        $rest.IsValidToken(JSON.parse(data).token).then(function (valid) {

            if (valid.valid) {

                if (JSON.parse(data).role === 1) {

                    $state.go('dashboardAdmin');
                } else {

                    $state.go('dashboard');
                }
            }
        }).catch(function (err) {

            $state.go('home');
        });
    }

    data = JSON.parse(data);

    $rest.GetUnconfirmedCount(data).then(function (dat) {

        _this3.shouldAddNewButton = dat.data.count === 0;
    });

    var dataPromise = $rest.GetUser(data);
    dataPromise.then(function (dataOut) {

        _this3.data = dataOut;
    }).catch(function (data) {

        console.error('The application failed to load with the provided parameters; trying to reload internal state.');
        //    $state.go( 'home' );
    });

    dataPromise = $rest.GetAllConferences(data);
    dataPromise.then(function (dataIn) {

        _this3.hasConferences = dataIn.length !== 0;
        _this3.conferences = {
            count: dataIn.length,
            data: dataIn
        };
    }).catch(function (data) {

        console.error('The application failed to load with the provided parameters; trying to reload internal state.');
        $state.go('home');
    });
}]);

angular.module('app').controller('EditConferenceAdminController', ['$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function ($stateParams, $cookies, $http, $state, $window, $rest) {
    var _this4 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;

    this.guid = conferenceGuid;

    this.ConfirmConference = function (guid) {

        _this4.isProcessing = true;

        $rest.ConfirmConference({

            guid: data.guid,
            token: data.token,
            conferenceGuid: guid

        }).then(function (dbData) {

            _this4.isProcessing = false;

            _this4.hasMessage = true;
            _this4.messageClass = {
                blue: true
            };
            _this4.messageText = "Conference confirmed!";
        }).catch(function (err) {

            _this4.isProcessing = false;

            _this4.hasMessage = true;
            _this4.messageClass = {
                red: true
            };
            _this4.messageText = "An error was encountered while executing that operation!";
        });
    };

    this.AddDelegate = function () {

        if (_this4.conferenceData.delegateInformation && _this4.conferenceData.delegateInformation.delegates && _this4.conferenceData.delegateInformation.delegates.length === 17) {

            _this4.isMessage = true;
            _this4.messageHeader = "Warning!";
            _this4.messageText = "You can not add any more delegates. The maximum number of delegates per delegation is 17.";
            _this4.messageClass = {

                'yellow': true

            };
            return false;
        }

        if (_this4.conferenceData.delegateInformation) {

            _this4.conferenceData.delegateInformation.delegates = _this4.conferenceData.delegateInformation.delegates || [];

            _this4.conferenceData.delegateInformation.delegates.push({

                name: 'Delegate Name'

            });
        } else {

            _this4.conferenceData.delegateInformation = {};

            _this4.conferenceData.delegateInformation = {
                delegates: []
            };

            _this4.conferenceData.delegateInformation.delegates.push({

                name: 'Delegate Name'

            });
        }
    };

    this.UpdateForm = function () {

        _this4.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: _this4.guid,
            data: _this4.conferenceData

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this4.processing = false;

                _this4.isMessage = true;
                _this4.messageHeader = "Successful!";
                _this4.messageText = "All the details were successfully updated!";
                _this4.messageClass = {

                    'blue': true

                };
            }
        });
    };

    this.AddGADelegate = function () {

        if (_this4.conferenceData.gaCrisis.delegates && _this4.conferenceData.gaCrisis.delegates.length === 5) {

            _this4.isMessage = true;
            _this4.messageHeader = "Warning!";
            _this4.messageText = "You can not add any more delegates. The maximum number of delegates per delegation is 5.";
            _this4.messageClass = {

                'yellow': true

            };
            return false;
        }

        if (_this4.conferenceData.gaCrisis && _this4.conferenceData.gaCrisis.delegates) {

            _this4.conferenceData.gaCrisis.delegates.push({

                name: 'Delegate Name'

            });
        } else {

            _this4.conferenceData.gaCrisis = {
                delegates: []
            };

            _this4.conferenceData.gaCrisis.delegates.push({

                name: 'Delegate Name'

            });
        }
    };

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (dataDb) {

        _this4.conferenceData = dataDb;

        if (_this4.conferenceData.travelArrangements) {

            if (_this4.conferenceData.travelArrangements.onward) {

                if (_this4.conferenceData.travelArrangements.onward.arrivalDate) {
                    _this4.conferenceData.travelArrangements.onward.arrivalDate = new Date(_this4.conferenceData.travelArrangements.onward.arrivalDate);
                }

                if (_this4.conferenceData.travelArrangements.onward.departureDate) {
                    _this4.conferenceData.travelArrangements.onward.departureDate = new Date(_this4.conferenceData.travelArrangements.onward.departureDate);
                }
            }

            if (_this4.conferenceData.travelArrangements.returnJourney) {

                if (_this4.conferenceData.travelArrangements.returnJourney.arrivalDate) {
                    _this4.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date(_this4.conferenceData.travelArrangements.returnJourney.arrivalDate);
                }

                if (_this4.conferenceData.travelArrangements.returnJourney.departureDate) {
                    _this4.conferenceData.travelArrangements.returnJourney.departureDate = new Date(_this4.conferenceData.travelArrangements.returnJourney.departureDate);
                }
            }
        }

        _this4.isConferenceConfirmed = _this4.conferenceData.isConfirmed;
        _this4.areFormsFilled = function () {

            return _this4.conferenceData.registration && _this4.conferenceData.delegateInformation && _this4.conferenceData.travelArrangements && _this4.conferenceData.gaCrisis && _this4.conferenceData.registration.isFormFilled && _this4.conferenceData.delegateInformation.isFormFilled && _this4.conferenceData.travelArrangements.isFormFilled && _this4.conferenceData.gaCrisis.isFormFilled;
        }();
    });
}]);

angular.module('app').controller('EditConferenceController', ['$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function ($stateParams, $cookies, $http, $state, $window, $rest) {
    var _this5 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;
    this.guid = conferenceGuid;

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (data) {

        _this5.conferenceData = data;

        _this5.isAllDone = function () {

            return _this5.conferenceData.registration && _this5.conferenceData.delegateInformation && _this5.conferenceData.travelArrangements && _this5.conferenceData.gaCrisis && _this5.conferenceData.registration.isFormFilled && _this5.conferenceData.delegateInformation.isFormFilled && _this5.conferenceData.travelArrangements.isFormFilled && _this5.conferenceData.gaCrisis.isFormFilled;
        }();
    });
}]);

angular.module('app').controller('ForgotPasswordController', ['RestApiService', '$state', '$cookies', '$window', function ($restApi, $state, $cookies, $window) {
    var _this6 = this;

    var self = this;
    self.Execute = function () {

        _this6.processing = true;

        var resultPromise = $restApi.ForgotPassword(self.user);
        resultPromise.then(function (dataForgot) {

            _this6.processing = false;

            self.hasMessage = true;
            self.messageText = "An email outling the steps to reset your password has been sent. Check your email!";
            self.messageClass = {

                blue: true

            };
        }).catch(function (dataError) {

            _this6.processing = false;

            if (dataError.error) {

                self.hasMessage = true;
                self.messageText = dataError.message;
                self.messageClass = {
                    red: true
                };
            }
        });
    };
}]);

angular.module('app').controller('HomePageController', ['RestApiService', '$state', '$cookies', '$window', function ($restApi, $state, $cookies, $window) {

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    if (isLoggedIn && data) {

        data = JSON.parse(data);

        $restApi.IsValidToken(data.token).then(function (valid) {

            if (valid.valid) {

                if (data.role === 1) {

                    $state.go('dashboardAdmin');
                } else {

                    $state.go('dashboard');
                }
            }
        }).catch(function (err) {

            $cookies.remove('isLoggedIn');
            $cookies.remove('loginData');
        });
    }

    var self = this;

    self.Login = function () {

        self.isProcessing = true;

        var resultPromise = $restApi.Login(self.user);
        resultPromise.then(function (dataLogin) {

            self.isProcessing = false;
            self.hasButtonMessage = true;
            self.buttonMessage = "Redirecting to dashboard...";

            $cookies.put('loginData', JSON.stringify(dataLogin));
            $cookies.put('isLoggedIn', true);

            if (dataLogin.role === 1) {

                $state.go('dashboardAdmin');
            } else {

                $state.go('dashboard');
            }
        }).catch(function (dataError) {

            self.isProcessing = false;

            if (dataError.loggedIn === false) {

                self.hasMessage = true;
                self.messageText = dataError.message;
                self.messageClass = {
                    red: true
                };
            }
        });
    };
}]);

angular.module('app').controller('NewConferenceController', ['$cookies', '$http', '$state', '$window', 'RestApiService', function ($cookies, $http, $state, $window, $rest) {
    var _this7 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    var self = this;

    data = JSON.parse(data);

    this.countries = [{

        code: 'IN',
        name: 'India'

    }, {

        code: 'US',
        name: 'America'

    }];

    this.populateStateList = function (country) {

        $rest.GetStates(country).then(function (data) {

            _this7.states = data;
        });
    };

    this.cancel = function () {

        $state.go('dashboard');
    };

    this.NewConference = function () {

        _this7.processing = true;

        var dataObject = {

            token: data.token,
            guid: data.guid,
            registration: {

                name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,
                address: {

                    street: self.conference.registration.address.street,
                    city: self.conference.registration.address.city,
                    pin: self.conference.registration.address.pin,
                    state: self.conference.registration.address.state,
                    country: self.conference.registration.address.country

                },

                facultyAdvisor: {

                    name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,
                    mobileNumber: self.conference.registration.facultyAdvisor.mobile,
                    landlineNumber: self.conference.registration.facultyAdvisor.landline,
                    email: self.conference.registration.facultyAdvisor.email

                }

            }

        };

        $rest.CreateConference(dataObject).then(function (data) {

            if (data.data.statusCode === 200) {

                _this7.processing = false;
                $state.go('dashboard');
            } else {

                _this7.isError = true;
                _this7.errorMessage = data.data.data.message;
            }
        }).catch(function (data) {

            _this7.isError = true;
            _this7.errorMessage = data.message;
        });
    };
}]);

angular.module('app').controller('NewUserController', ['$cookies', '$http', '$state', '$window', 'RestApiService', 'CryptoService', function ($cookies, $http, $state, $window, $rest, $crypto) {
    var _this8 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    var self = this;

    data = JSON.parse(data);

    this.NewUser = function () {

        _this8.processing = true;

        var hash = $crypto.getHmac(_this8.user.username + _this8.user.email, data.guid);

        var dataObject = {

            token: data.token,
            guid: data.guid,
            hash: hash,
            data: _this8.user

        };

        $rest.CreateUser(dataObject).then(function (data) {

            if (data.data.statusCode === 200) {

                _this8.processing = false;
                _this8.isMessage = true;
                _this8.messageClass = {
                    blue: true
                };
                _this8.messageHeader = "User Added";
                _this8.messageText = 'The user ' + _this8.user.username + ' was successfully created.';
            } else {

                _this8.processing = false;
                _this8.isMessage = true;
                _this8.messageClass = {
                    red: true
                };
                _this8.messageHeader = "An error was encountered";
                _this8.messageText = data.message;
            }
        }).catch(function (data) {

            _this8.processing = false;
            _this8.isMessage = true;
            _this8.messageClass = {
                red: true
            };
            _this8.messageHeader = "An error was encountered";
            console.log(data);
            _this8.messageText = data.message;
        });
    };
}]);

angular.module('app').factory('CryptoService', [function () {

    return {

        getSha512: function getSha512(data) {

            var shaObj = new jsSHA("SHA-512", "TEXT");
            shaObj.update(data);
            return shaObj.getHash("HEX");
        },

        getHmac: function getHmac(data, key) {

            var shaObj = new jsSHA('SHA-512', "TEXT");
            shaObj.setHMACKey(key, "TEXT");
            shaObj.update(data);
            return shaObj.getHMAC("HEX");
        }

    };
}]);

angular.module('app').factory('RestApiService', ['$http', 'CryptoService', '$q', function ($http, $cryptoService, $q) {

    // const apiUrl = 'http://api.app.beta.dsmun.com';
    var apiUrl = 'http://localhost:3345';

    return {
        IsValidToken: function IsValidToken(token) {

            var promise = $q.defer();

            $http.get(apiUrl + '/auth/token/valid/' + token).then(function (data) {

                promise.resolve(data.data.data);
            }).catch(function (data) {

                promise.reject({

                    valid: false

                });
            });

            return promise.promise;
        },
        Login: function Login(userObject) {

            var dataObject = {},
                promise = $q.defer();

            dataObject.username = userObject.username;
            dataObject.password = $cryptoService.getSha512(userObject.password);

            $http.post(apiUrl + '/auth', dataObject).then(function (data) {

                if (data.status === 200 && data.data.data.token) {

                    promise.resolve({

                        token: data.data.data.token,
                        guid: data.data.data.guid,
                        role: data.data.data.role

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        loggedIn: false

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    loggedIn: false

                });
            });

            return promise.promise;
        },
        ForgotPassword: function ForgotPassword(userObject) {

            var dataObject = {},
                promise = $q.defer();

            dataObject.username = userObject.username;

            $http.post(apiUrl + '/forgot', dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve();
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetUser: function GetUser(data) {

            var promise = $q.defer();

            $http.get(apiUrl + '/users/' + data.guid + '?token=' + data.token).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve(data.data.data[0]);
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetAllConferences: function GetAllConferences(data) {

            var promise = $q.defer();

            $http.get(apiUrl + '/conferences?guid=' + data.guid + '&token=' + data.token).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve(data.data.data);
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetAllConferencesForAllUsers: function GetAllConferencesForAllUsers(data) {

            var promise = $q.defer();

            $http.get(apiUrl + '/conferences/all?guid=' + data.guid + '&token=' + data.token).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve(data.data.data);
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetUnconfirmedCount: function GetUnconfirmedCount(data) {

            var promise = $q.defer();

            $http.get(apiUrl + '/conferences/unconfirmed/count?guid=' + data.guid + '&token=' + data.token).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve({
                        data: data.data.data
                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetUnconfirmedConferences: function GetUnconfirmedConferences(data) {

            var promise = $q.defer();

            $http.get(apiUrl + '/conferences/unconfirmed/all?guid=' + data.guid + '&token=' + data.token).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve({
                        data: data.data.data
                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetConference: function GetConference(dataIn) {

            var promise = $q.defer();

            $http.get(apiUrl + '/conferences/' + dataIn.conferenceGuid + '?token=' + dataIn.token + '&guid=' + dataIn.guid).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve(data.data.data[0]);
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        Logout: function Logout(dataIn) {

            var promise = $q.defer();

            $http.post(apiUrl + '/deauth', {

                guid: dataIn.guid,
                token: dataIn.token

            }).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        statusCode: 200

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        GetStates: function GetStates(country) {

            var promise = $q.defer();

            $http.get(apiUrl + '/metadata/states/' + country).then(function (data) {

                if (data.status === 200 && data.data.data) {

                    promise.resolve(data.data.data);
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        CreateConference: function CreateConference(confUserObject) {

            var promise = $q.defer();

            var dataObject = {

                token: confUserObject.token,
                guid: confUserObject.guid,
                data: {

                    registration: confUserObject.registration

                }

            };

            $http.post(apiUrl + '/conferences', dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        data: data.data

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        CreateUser: function CreateUser(confUserObject) {

            var promise = $q.defer();

            var dataObject = {

                token: confUserObject.token,
                data: confUserObject.data,
                hash: confUserObject.hash

            };

            $http.post(apiUrl + '/users', dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        data: data.data

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        UpdateConference: function UpdateConference(confUserObject) {

            var promise = $q.defer();

            var dataObject = {

                token: confUserObject.token,
                guid: confUserObject.guid,
                data: confUserObject.data

            };

            $http.put(apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        data: data.data

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        ConfirmConference: function ConfirmConference(confUserObject) {

            var promise = $q.defer();

            var dataObject = {

                token: confUserObject.token,
                guid: confUserObject.guid,
                data: {
                    isConfirmed: true
                }

            };

            $http.put(apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        data: data.data

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        },
        UnconfirmConference: function UnconfirmConference(confUserObject) {

            var promise = $q.defer();

            var dataObject = {

                token: confUserObject.token,
                guid: confUserObject.guid,
                data: {
                    isConfirmed: false
                }

            };

            $http.put(apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject).then(function (data) {

                if (data.status === 200) {

                    promise.resolve({

                        data: data.data

                    });
                } else {

                    promise.reject({

                        message: data.data.message,
                        error: true

                    });
                }
            }).catch(function (data) {

                promise.reject({

                    message: data.data.message,
                    error: true

                });
            });

            return promise.promise;
        }
    };
}]);

angular.module('app').controller('DelegateInformationFormController', ['$cookies', '$http', '$stateParams', '$window', 'RestApiService', function ($cookies, $http, $stateParams, $window, $rest) {
    var _this9 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;
    this.guid = conferenceGuid;

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (data) {

        _this9.conferenceData = data;
    });

    this.AddDelegate = function () {

        if (_this9.conferenceData.delegateInformation && _this9.conferenceData.delegateInformation.delegates.length === 17) {

            _this9.isMessage = true;
            _this9.messageHeader = "Warning!";
            _this9.messageText = "You can not add any more delegates. The maximum number of delegates per delegation is 17.";
            _this9.messageClass = {

                'yellow': true

            };
            return false;
        }

        if (_this9.conferenceData.delegateInformation) {

            _this9.conferenceData.delegateInformation.delegates.push({

                name: 'Delegate Name'

            });
        } else {

            _this9.conferenceData.delegateInformation = {};

            _this9.conferenceData.delegateInformation = {
                delegates: []
            };

            _this9.conferenceData.delegateInformation.delegates.push({

                name: 'Delegate Name'

            });
        }
    };

    this.UpdateForm = function () {

        _this9.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: _this9.guid,
            data: _this9.conferenceData

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this9.processing = false;

                _this9.isMessage = true;
                _this9.messageHeader = "Successful!";
                _this9.messageText = "All the details were successfully updated!";
                _this9.messageClass = {

                    'blue': true

                };
            }
        });
    };
}]);

angular.module('app').controller('GaCrisisFormController', ['lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function (_, $cookies, $http, $stateParams, $window, $rest) {
    var _this10 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;
    this.guid = conferenceGuid;

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (data) {

        _this10.conferenceData = data;
    });

    this.AddDelegate = function () {

        if (_this10.conferenceData.gaCrisis.delegates && _this10.conferenceData.gaCrisis.delegates.length === 5) {

            _this10.isMessage = true;
            _this10.messageHeader = "Warning!";
            _this10.messageText = "You can not add any more delegates. The maximum number of delegates per delegation is 5.";
            _this10.messageClass = {

                'yellow': true

            };
            return false;
        }

        if (_this10.conferenceData.gaCrisis && _this10.conferenceData.gaCrisis.delegates) {

            _this10.conferenceData.gaCrisis.delegates.push({

                name: 'Delegate Name'

            });
        } else {

            _this10.conferenceData.gaCrisis = {
                delegates: []
            };

            _this10.conferenceData.gaCrisis.delegates.push({

                name: 'Delegate Name'

            });
        }
    };

    this.UpdateForm = function () {

        _this10.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: _this10.guid,
            data: _this10.conferenceData

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this10.processing = false;

                _this10.isMessage = true;
                _this10.messageHeader = "Successful!";
                _this10.messageText = "All the details were successfully updated!";
                _this10.messageClass = {

                    'blue': true

                };
            }
        });
    };
}]);

angular.module('app').controller('MedicalHistoryFormController', ['lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function (_, $cookies, $http, $stateParams, $window, $rest) {
    var _this11 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;
    this.guid = conferenceGuid;

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (data) {

        _this11.conferenceData = data;
    });

    this.UpdateForm = function () {

        _this11.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: _this11.guid,
            data: _this11.conferenceData

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this11.processing = false;

                _this11.isMessage = true;
                _this11.messageHeader = "Successful!";
                _this11.messageText = "All the details were successfully updated!";
                _this11.messageClass = {

                    'blue': true

                };
            }
        });
    };
}]);

angular.module('app').controller('RegistrationFormController', ['$cookies', '$http', '$stateParams', '$window', 'RestApiService', function ($cookies, $http, $stateParams, $window, $rest) {
    var _this12 = this;

    var guid = $stateParams.guid;
    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    this.guid = $stateParams.guid;

    data = JSON.parse(data);

    $rest.GetConference({

        token: data.token,
        guid: data.guid,
        conferenceGuid: guid

    }).then(function (data) {

        _this12.conference = data;
    });

    this.UpdateForm = function () {

        _this12.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: guid,
            data: _this12.conference

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this12.processing = false;

                _this12.isMessage = true;
                _this12.messageHeader = "Successful!";
                _this12.messageText = "All the details were successfully updated!";
                _this12.messageClass = {

                    'blue': true

                };
            }
        });
    };
}]);

angular.module('app').controller('TravelArrangementsFormController', ['$cookies', '$http', '$stateParams', '$window', 'RestApiService', function ($cookies, $http, $stateParams, $window, $rest) {
    var _this13 = this;

    var isLoggedIn = $cookies.get('isLoggedIn');
    var data = $cookies.get('loginData');

    data = JSON.parse(data);

    var conferenceGuid = $stateParams.guid;
    this.guid = conferenceGuid;

    $rest.GetConference({

        conferenceGuid: conferenceGuid,
        token: data.token,
        guid: data.guid

    }).then(function (data) {

        _this13.conferenceData = data;

        if (_this13.conferenceData.travelArrangements) {

            if (_this13.conferenceData.travelArrangements.onward) {

                if (_this13.conferenceData.travelArrangements.onward.arrivalDate) {
                    _this13.conferenceData.travelArrangements.onward.arrivalDate = new Date(_this13.conferenceData.travelArrangements.onward.arrivalDate);
                }

                if (_this13.conferenceData.travelArrangements.onward.departureDate) {
                    _this13.conferenceData.travelArrangements.onward.departureDate = new Date(_this13.conferenceData.travelArrangements.onward.departureDate);
                }
            }

            if (_this13.conferenceData.travelArrangements.returnJourney) {

                if (_this13.conferenceData.travelArrangements.returnJourney.arrivalDate) {
                    _this13.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date(_this13.conferenceData.travelArrangements.returnJourney.arrivalDate);
                }

                if (_this13.conferenceData.travelArrangements.returnJourney.departureDate) {
                    _this13.conferenceData.travelArrangements.returnJourney.departureDate = new Date(_this13.conferenceData.travelArrangements.returnJourney.departureDate);
                }
            }
        }
    });

    this.UpdateForm = function () {

        _this13.processing = true;

        $rest.UpdateConference({

            token: data.token,
            guid: data.guid,
            conferenceGuid: _this13.guid,
            data: _this13.conferenceData

        }).then(function (dataIn) {

            if (dataIn.data.statusCode === 200) {

                _this13.processing = false;

                _this13.isMessage = true;
                _this13.messageHeader = "Successful!";
                _this13.messageText = "All the details were successfully updated!";
                _this13.messageClass = {

                    'blue': true

                };
            }
        });
    };
}]);
//# sourceMappingURL=app.min.js.map
