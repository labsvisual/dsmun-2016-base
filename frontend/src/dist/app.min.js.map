{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$cookies","$state","$window","$rest","_this","this","data","get","showLogout","Logout","promise","JSON","parse","then","remove","err","location","_this2","isLoggedIn","go","GetUnconfirmedCount","dat","shouldAddNewButton","count","dataPromise","GetUser","dataOut","console","log","GetAllConferences","dataIn","hasConferences","length","conferences","$stateParams","$http","_this3","conferenceGuid","guid","GetConference","token","conferenceData","isAllDone","registration","isFormFilled","delegateInformation","travelArrangements","gaCrisis","$restApi","_this4","self","Execute","processing","resultPromise","ForgotPassword","user","dataForgot","hasMessage","messageText","messageClass","blue","dataError","error","message","red","Login","dataLogin","put","stringify","reload","loggedIn","_this5","countries","code","name","populateStateList","country","GetStates","states","cancel","NewConference","dataObject","conference","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","statusCode","isError","errorMessage","factory","getSha512","shaObj","jsSHA","update","getHash","$cryptoService","$q","apiUrl","userObject","defer","username","password","post","status","resolve","role","reject","confUserObject","UpdateConference","_this6","AddDelegate","delegates","isMessage","messageHeader","yellow","push","UpdateForm","_","_this7","_this8","medicalHistory","_this9","_this10","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                   $cookies.put( 'isLoggedIn', true );\n\n                   $window.location.reload();\n                   $state.go( 'dashboard' );\n\n               } ).catch( ( dataError ) => {\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.beta.dsmun.com';\n        // const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}