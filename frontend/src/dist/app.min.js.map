{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","factory","getSha512","data","shaObj","jsSHA","update","getHash","$http","$cryptoService","$q","apiUrl","Login","userObject","dataObject","promise","defer","username","password","post","then","status","token","resolve","guid","role","reject","message","loggedIn","GetUser","get","error","GetAllConferences","GetConference","dataIn","conferenceGuid","Logout","statusCode","GetStates","country","CreateConference","confUserObject","registration","UpdateConference","put","$cookies","$state","$window","$rest","_this","this","showLogout","JSON","parse","remove","err","location","_this2","isLoggedIn","go","dataPromise","dataOut","console","log","hasConferences","length","conferences","count","$stateParams","_this3","conferenceData","$restApi","self","resultPromise","user","dataLogin","stringify","reload","dataError","hasMessage","messageText","messageClass","red","_this4","countries","code","name","populateStateList","states","cancel","NewConference","processing","conference","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","isError","errorMessage","_this5","UpdateForm","isMessage","messageHeader","blue"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n                   controller: 'HomePageController'\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n                   controller: 'DashboardController'\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n                   controller: 'NewConferenceController'\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n                   controller: 'EditConferenceController'\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n                   controller: 'RegistrationFormController'\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n                   controller: 'DelegateInformationFormController'\n\n               });\n\n       }]);\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.base.dsmun.com:3345'\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n           self.Login = () => {\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                   $cookies.put( 'isLoggedIn', true );\n\n                   $window.location.reload();\n                   $state.go( 'dashboard' );\n\n               } ).catch( ( dataError ) => {\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}