{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","factory","getSha512","data","shaObj","jsSHA","update","getHash","$http","$cryptoService","$q","apiUrl","Login","userObject","dataObject","promise","defer","username","password","post","then","status","token","resolve","guid","role","reject","message","loggedIn","ForgotPassword","error","GetUser","get","GetAllConferences","GetUnconfirmedCount","GetConference","dataIn","conferenceGuid","Logout","statusCode","GetStates","country","CreateConference","confUserObject","registration","UpdateConference","put","controller","$cookies","$state","$window","$rest","_this","this","showLogout","JSON","parse","remove","err","location","_this2","isLoggedIn","go","dat","shouldAddNewButton","count","dataPromise","dataOut","console","log","hasConferences","length","conferences","$stateParams","_this3","conferenceData","isAllDone","isFormFilled","delegateInformation","travelArrangements","gaCrisis","$restApi","_this4","self","Execute","processing","resultPromise","user","dataForgot","hasMessage","messageText","messageClass","blue","dataError","red","dataLogin","stringify","reload","_this5","countries","code","name","populateStateList","states","cancel","NewConference","conference","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","isError","errorMessage","_this6","AddDelegate","delegates","isMessage","messageHeader","yellow","push","UpdateForm","_","_this7","_this8","medicalHistory","_this9","_this10","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"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","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n\n               })\n               .state( 'forgot', {\n\n                   url: '/forgot',\n                   templateUrl: 'app/templates/forgot-password.html',\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n\n               });\n\n       }]);\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.app.beta.dsmun.com';\n        // const apiUrl = 'http://localhost:3345';\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            ForgotPassword( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n\n                $http.post( apiUrl + '/forgot', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve();\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUnconfirmedCount( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/unconfirmed/count?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( {\n                            data: data.data.data\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           $rest.GetUnconfirmedCount( data ).then( ( dat ) => {\n\n               this.shouldAddNewButton = dat.data.count === 0;\n\n           } );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'ForgotPasswordController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n\n           const self = this;\n           self.Execute = () => {\n\n               this.processing = true;\n\n               const resultPromise = $restApi.ForgotPassword( self.user );\n               resultPromise.then( ( dataForgot ) => {\n\n                   this.processing = false;\n\n                   self.hasMessage = true;\n                   self.messageText = \"An email outling the steps to reset your password has been sent. Check your email!\";\n                   self.messageClass = {\n\n                       blue: true\n\n                   };\n\n               } ).catch( ( dataError ) => {\n\n                   this.processing = false;\n\n                   if( dataError.error ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n\n           self.Login = () => {\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                   $cookies.put( 'isLoggedIn', true );\n\n                   $window.location.reload();\n                   $state.go( 'dashboard' );\n\n               } ).catch( ( dataError ) => {\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation && this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {};\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}