{"version":3,"sources":["app.min.js"],"names":["angular","module","config","$urlRouterProvider","$stateProvider","otherwise","state","url","templateUrl","controller","$cookies","$state","$window","$rest","_this","this","data","get","showLogout","Logout","promise","JSON","parse","then","remove","err","location","_this2","isLoggedIn","go","dataPromise","GetUser","dataOut","console","log","GetAllConferences","dataIn","hasConferences","length","conferences","count","$stateParams","$http","_this3","conferenceGuid","guid","GetConference","token","conferenceData","isAllDone","registration","isFormFilled","delegateInformation","travelArrangements","gaCrisis","$restApi","self","Login","resultPromise","user","dataLogin","put","stringify","reload","dataError","loggedIn","hasMessage","messageText","message","messageClass","red","_this4","countries","code","name","populateStateList","country","GetStates","states","cancel","NewConference","processing","dataObject","conference","facultyAdvisor","firstName","lastName","address","street","city","pin","mobileNumber","mobile","landlineNumber","landline","email","CreateConference","statusCode","isError","errorMessage","factory","getSha512","shaObj","jsSHA","update","getHash","$cryptoService","$q","apiUrl","userObject","defer","username","password","post","status","resolve","role","reject","error","confUserObject","UpdateConference","_this5","AddDelegate","delegates","isMessage","messageHeader","yellow","push","UpdateForm","blue","_","_this6","_this7","medicalHistory","_this8","_this9","onward","arrivalDate","Date","departureDate","returnJourney"],"mappings":"AAAA,YAAAA,SACKC,OAAQ,OACL,YACA,YACA,aAGRD,QACKC,OAAQ,OAEbD,QAAQC,OAAQ,OACRC,QAAU,qBAAsB,iBAAkB,SAAEC,EAAoBC,GAErED,EAAmBE,UAAW,KAE9BD,EACKE,MAAO,QAEJC,IAAK,IACLC,YAAa,8BACbC,WAAY,uBAGfH,MAAO,aAEJC,IAAK,aACLC,YAAa,+BACbC,WAAY,wBAGfH,MAAO,iBAEJC,IAAK,mBACLC,YAAa,oCACbC,WAAY,4BAGfH,MAAO,kBAEJC,IAAK,qBACLC,YAAa,qCACbC,WAAY,6BAGfH,MAAO,oBAEJC,IAAK,kCACLC,YAAa,wCACbC,WAAY,+BAGfH,MAAO,2BAEJC,IAAK,+BACLC,YAAa,gDACbC,WAAY,sCAGfH,MAAO,0BAEJC,IAAK,4BACLC,YAAa,+CACbC,WAAY,qCAGfH,MAAO,gBAEJC,IAAK,wBACLC,YAAa,qCACbC,WAAY,8BAM/BT,QAAQC,OAAQ,OACRQ,WAAY,sBAAwB,WAAY,SAAU,UAAW,iBAAkB,SAAUC,EAAUC,EAAQC,EAASC,GAAQ,GAAAC,GAAAC,KAE1HC,EAAON,EAASO,IAAK,YAC3BF,MAAKG,WAAaR,EAASO,IAAK,eAAkBD,EAClDD,KAAKI,OAAS,WAEV,GAAMC,GAAUP,EAAMM,OAAQE,KAAKC,MAAON,GAC1CI,GAAQG,KAAM,SAAEP,GAEZN,EAASc,OAAQ,cACjBd,EAASc,OAAQ,eAHrBJ,SAKW,SAAEK,GAETf,EAASc,OAAQ,cACjBd,EAASc,OAAQ,eAIrBV,EAAKI,YAAa,EAClBN,EAAQc,SAAW,QAOnC1B,QAAQC,OAAQ,OACRQ,WAAY,uBAAyB,iBAAkB,WAAY,SAAU,SAAUI,EAAOH,EAAUC,GAAS,GAAAgB,GAAAZ,KAE1Ga,EAAalB,EAASO,IAAK,cACzBD,EAAeN,EAASO,IAAK,YAEnC,KAAKW,IAAeZ,EAChB,MAAOL,GAAOkB,GAAI,OAGtBb,GAAOK,KAAKC,MAAON,EAEnB,IAAIc,GAAcjB,EAAMkB,QAASf,EACjCc,GAAYP,KAAM,SAAES,GAEhBL,EAAKX,KAAOgB,IAFhBF,SAKW,SAAEd,GAETiB,QAAQC,IAAK,uBAIjBJ,EAAcjB,EAAMsB,kBAAmBnB,GACvCc,EAAYP,KAAM,SAAEa,GAEhBT,EAAKU,eAAqC,IAAlBD,EAAOE,OAC/BX,EAAKY,aACDC,MAAOJ,EAAOE,OACdtB,KAAMoB,KALdN,SAQW,SAAEd,GAETiB,QAAQC,IAAK,0BAO5BlC,QAAQC,OAAQ,OACRQ,WAAY,4BAA8B,eAAgB,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUgC,EAAc/B,EAAUgC,EAAO/B,EAAQC,EAASC,GAAQ,GAAA8B,GAAA5B,KAGjLC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BD,GAAOK,KAAKC,MAAON,EAEnB,IAAM4B,GAAiBH,EAAaI,IACpC9B,MAAK8B,KAAOD,EAEZ/B,EAAMiC,eAEFF,eAAAA,EACAG,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,OAEXtB,KAAM,SAAEP,GAER2B,EAAKK,eAAiBhC,EAEtB2B,EAAKM,UAAYN,EAAKK,eAAeE,aAAaC,cAAgBR,EAAKK,eAAeI,oBAAoBD,cAAgBR,EAAKK,eAAeK,mBAAmBF,cAAgBR,EAAKK,eAAeM,SAASH,kBAM7NnD,QAAQC,OAAQ,OACRQ,WAAY,sBAAwB,iBAAkB,SAAU,WAAY,UAAW,SAAU8C,EAAU5C,EAAQD,EAAUE,GAE1H,GAAMgB,GAAalB,EAASO,IAAK,cAC3BD,EAAeN,EAASO,IAAK,YAE/BW,IAAcZ,GACdL,EAAOkB,GAAI,YAGf,IAAM2B,GAAOzC,IACbyC,GAAKC,MAAQ,WAET,GAAMC,GAAgBH,EAASE,MAAOD,EAAKG,KAC3CD,GAAcnC,KAAM,SAAEqC,GAElBlD,EAASmD,IAAK,YAAaxC,KAAKyC,UAAWF,IAC3ClD,EAASmD,IAAK,cAAc,GAE5BjD,EAAQc,SAASqC,SACjBpD,EAAOkB,GAAI,eANf6B,SAQW,SAAEM,GAELA,EAAUC,YAAa,IAEvBT,EAAKU,YAAa,EAClBV,EAAKW,YAAcH,EAAUI,QAC7BZ,EAAKa,cACDC,KAAK,UAWhCtE,QAAQC,OAAQ,OACRQ,WAAY,2BAA6B,WAAY,QAAS,SAAU,UAAW,iBAAkB,SAAUC,EAAUgC,EAAO/B,EAAQC,EAASC,GAAQ,GAAA0D,GAAAxD,KAGlJC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,cAErBuC,EAAOzC,IAEbC,GAAOK,KAAKC,MAAON,GAEnBD,KAAKyD,YAIGC,KAAM,KACNC,KAAM,UAMND,KAAM,KACNC,KAAM,YAMd3D,KAAK4D,kBAAoB,SAAEC,GAEvB/D,EAAMgE,UAAWD,GAAUrD,KAAM,SAAEP,GAE/BuD,EAAKO,OAAS9D,KAMtBD,KAAKgE,OAAS,WAEVpE,EAAOkB,GAAI,cAIfd,KAAKiE,cAAgB,WAEjBT,EAAKU,YAAa,CAElB,IAAMC,IAEFnC,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXK,cAEIwB,KAAMlB,EAAK2B,WAAWjC,aAAakC,eAAeC,UAAY,IAAM7B,EAAK2B,WAAWjC,aAAakC,eAAeE,SAChHC,SAEIC,OAAQhC,EAAK2B,WAAWjC,aAAaqC,QAAQC,OAC7CC,KAAMjC,EAAK2B,WAAWjC,aAAaqC,QAAQE,KAC3CC,IAAKlC,EAAK2B,WAAWjC,aAAaqC,QAAQG,IAC1CpF,MAAOkD,EAAK2B,WAAWjC,aAAaqC,QAAQjF,MAC5CsE,QAASpB,EAAK2B,WAAWjC,aAAaqC,QAAQX,SAIlDQ,gBAEIV,KAAMlB,EAAK2B,WAAWjC,aAAakC,eAAeC,UAAY,IAAM7B,EAAK2B,WAAWjC,aAAakC,eAAeE,SAChHK,aAAcnC,EAAK2B,WAAWjC,aAAakC,eAAeQ,OAC1DC,eAAgBrC,EAAK2B,WAAWjC,aAAakC,eAAeU,SAC5DC,MAAOvC,EAAK2B,WAAWjC,aAAakC,eAAeW,QAQ/DlF,GAAMmF,iBAAkBd,GAAa3D,KAAM,SAAEP,GAEX,MAAzBA,EAAKA,KAAKiF,YAEV1B,EAAKU,YAAa,EAClBtE,EAAOkB,GAAI,eAIX0C,EAAK2B,SAAU,EACf3B,EAAK4B,aAAenF,EAAKA,KAAKA,KAAKoD,WAV5CvD,SAcW,SAAEG,GAEVuD,EAAK2B,SAAU,EACf3B,EAAK4B,aAAenF,EAAKoD,cAQ3CpE,QACKC,OAAQ,OACRmG,QAAS,iBAAmB,WAEzB,OAEIC,UAAW,SAAUrF,GAEjB,GAAIsF,GAAS,GAAIC,OAAO,UAAW,OAEnC,OADAD,GAAOE,OAAQxF,GACRsF,EAAOG,QAAS,YAQvCzG,QACKC,OAAQ,OACRmG,QAAS,kBAAoB,QAAS,gBAAiB,KAAM,SAAE1D,EAAOgE,EAAgBC,GAEnF,GAAMC,GAAS,gCAEf,QAEInD,MAFG,SAEIoD,GAEH,GAAM3B,MACA9D,EAAauF,EAAGG,OAuCtB,OArCA5B,GAAW6B,SAAWF,EAAWE,SACjC7B,EAAW8B,SAAWN,EAAeL,UAAWQ,EAAWG,UAE3DtE,EAAMuE,KAAML,EAAS,QAAS1B,GAAa3D,KAAM,SAAEP,GAE3B,MAAhBA,EAAKkG,QAAkBlG,EAAKA,KAAKA,KAAK+B,MAEtC3B,EAAQ+F,SAEJpE,MAAO/B,EAAKA,KAAKA,KAAK+B,MACtBF,KAAO7B,EAAKA,KAAKA,KAAK6B,KACtBuE,KAAOpG,EAAKA,KAAKA,KAAKoG,OAM1BhG,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBH,UAAU,MAjBtBvB,SAuBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBH,UAAU,MAMX7C,EAAQA,SAInBW,QAhDG,SAgDMf,GAEL,GAAMI,GAAauF,EAAGG,OA8BtB,OA5BApE,GAAMzB,IAAS2F,EAAf,UAAiC5F,EAAK6B,KAAtC,UAAsD7B,EAAK+B,OAAWxB,KAAM,SAAEP,GAEtD,MAAhBA,EAAKkG,QAAkBlG,EAAKA,KAAKA,KAEjCI,EAAQ+F,QAASnG,EAAKA,KAAKA,KAAM,IAIjCI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAXnB5E,SAiBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInBe,kBApFG,SAoFgBnB,GAEf,GAAMI,GAAauF,EAAGG,OA8BtB,OA5BApE,GAAMzB,IAAS2F,EAAf,qBAA4C5F,EAAK6B,KAAjD,UAAiE7B,EAAK+B,OAAWxB,KAAM,SAAEP,GAEjE,MAAhBA,EAAKkG,QAAkBlG,EAAKA,KAAKA,KAEjCI,EAAQ+F,QAASnG,EAAKA,KAAKA,MAI3BI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAXnB5E,SAiBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInB0B,cAxHG,SAwHYV,GAEX,GAAMhB,GAAauF,EAAGG,OA8BtB,OA5BApE,GAAMzB,IAAS2F,EAAf,gBAAuCxE,EAAOQ,eAA9C,UAAwER,EAAOW,MAA/E,SAA+FX,EAAOS,MAAUtB,KAAM,SAAEP,GAEhG,MAAhBA,EAAKkG,QAAkBlG,EAAKA,KAAKA,KAEjCI,EAAQ+F,QAASnG,EAAKA,KAAKA,KAAM,IAIjCI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAXnB5E,SAiBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInBD,OA5JG,SA4JKiB,GAEJ,GAAMhB,GAAUuF,EAAGG,OAuCnB,OArCApE,GAAMuE,KAAML,EAAS,WAEjB/D,KAAMT,EAAOS,KACbE,MAAOX,EAAOW,QAEdxB,KAAM,SAAEP,GAEY,MAAhBA,EAAKkG,OAEL9F,EAAQ+F,SAEJlB,WAAY,MAMhB7E,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MApBnB5E,SA0BW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInByD,UAzMG,SAyMQD,GAEP,GAAMxD,GAAauF,EAAGG,OA8BtB,OA5BApE,GAAMzB,IAAS2F,EAAf,oBAA2ChC,GAAarD,KAAM,SAAEP,GAExC,MAAhBA,EAAKkG,QAAkBlG,EAAKA,KAAKA,KAEjCI,EAAQ+F,QAASnG,EAAKA,KAAKA,MAI3BI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAXnB5E,SAiBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInB4E,iBA7OG,SA6OeuB,GAEd,GAAMnG,GAAUuF,EAAGG,QAEb5B,GAEFnC,MAAOwE,EAAexE,MACtBF,KAAM0E,EAAe1E,KACrB7B,MAEIkC,aAAcqE,EAAerE,cAsCrC,OAhCAR,GAAMuE,KAAML,EAAS,eAAgB1B,GAAa3D,KAAM,SAAEP,GAElC,MAAhBA,EAAKkG,OAEL9F,EAAQ+F,SAEJnG,KAAMA,EAAKA,OAMfI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAfnB5E,SAqBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,SAInBoG,iBAjSG,SAiSeD,GAEd,GAAMnG,GAAUuF,EAAGG,QAEb5B,GAEFnC,MAAOwE,EAAexE,MACtBF,KAAM0E,EAAe1E,KACrB7B,KAAMuG,EAAevG,KAoCzB,OAhCA0B,GAAMmB,IAAK+C,EAAS,gBAAkBW,EAAe3E,eAAgBsC,GAAa3D,KAAM,SAAEP,GAElE,MAAhBA,EAAKkG,OAEL9F,EAAQ+F,SAEJnG,KAAMA,EAAKA,OAMfI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAfnB5E,SAqBW,SAAE1B,GAETI,EAAQiG,QAEJjD,QAASpD,EAAKA,KAAKoD,QACnBkD,OAAO,MAMRlG,EAAQA,aAQ/BpB,QAAQC,OAAQ,OACRQ,WAAY,qCAAuC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUC,EAAUgC,EAAOD,EAAc7B,EAASC,GAAQ,GAAA4G,GAAA1G,KAGxKC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BD,GAAOK,KAAKC,MAAON,EAEnB,IAAM4B,GAAiBH,EAAaI,IACpC9B,MAAK8B,KAAOD,EAEZ/B,EAAMiC,eAEFF,eAAAA,EACAG,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,OAEXtB,KAAM,SAAEP,GAERyG,EAAKzE,eAAiBhC,IAI1BD,KAAK2G,YAAc,WAEf,MAAiE,MAA7DD,EAAKzE,eAAeI,oBAAoBuE,UAAUrF,QAElDmF,EAAKG,WAAY,EACjBH,EAAKI,cAAgB,WACrBJ,EAAKtD,YAAc,4FACnBsD,EAAKpD,cAEDyD,QAAU,IAGP,QAIPL,EAAKzE,eAAeI,oBAEpBqE,EAAKzE,eAAeI,oBAAoBuE,UAAUI,MAE9CrD,KAAM,mBAMV+C,EAAKzE,eAAeI,qBAChBuE,cAGJF,EAAKzE,eAAeI,oBAAoBuE,UAAUI,MAE9CrD,KAAM,qBAQlB3D,KAAKiH,WAAa,WAEdP,EAAKxC,YAAa,EAElBpE,EAAM2G,kBAEFzE,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgB6E,EAAK5E,KACrB7B,KAAMyG,EAAKzE,iBAEXzB,KAAM,SAAEa,GAEuB,MAA3BA,EAAOpB,KAAKiF,aAEZwB,EAAKxC,YAAa,EAElBwC,EAAKG,WAAY,EACjBH,EAAKI,cAAgB,cACrBJ,EAAKtD,YAAc,6CACnBsD,EAAKpD,cAED4D,MAAQ,UAYnCjI,QAAQC,OAAQ,OACRQ,WAAY,0BAA4B,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUyH,EAAGxH,EAAUgC,EAAOD,EAAc7B,EAASC,GAAQ,GAAAsH,GAAApH,KAG1KC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BD,GAAOK,KAAKC,MAAON,EAEnB,IAAM4B,GAAiBH,EAAaI,IACpC9B,MAAK8B,KAAOD,EAEZ/B,EAAMiC,eAEFF,eAAAA,EACAG,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,OAEXtB,KAAM,SAAEP,GAERmH,EAAKnF,eAAiBhC,IAI1BD,KAAK2G,YAAc,WAEf,MAAIS,GAAKnF,eAAeM,UAA8D,IAAlD6E,EAAKnF,eAAeM,SAASqE,UAAUrF,QAEvE6F,EAAKP,WAAY,EACjBO,EAAKN,cAAgB,WACrBM,EAAKhE,YAAc,2FACnBgE,EAAK9D,cAEDyD,QAAU,IAGP,QAIPK,EAAKnF,eAAeM,SAEpB6E,EAAKnF,eAAeM,SAASqE,UAAUI,MAEnCrD,KAAM,mBAMVyD,EAAKnF,eAAeM,UAChBqE,cAGJQ,EAAKnF,eAAeM,SAASqE,UAAUI,MAEnCrD,KAAM,qBAQlB3D,KAAKiH,WAAa,WAEdG,EAAKlD,YAAa,EAElBpE,EAAM2G,kBAEFzE,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgBuF,EAAKtF,KACrB7B,KAAMmH,EAAKnF,iBAEXzB,KAAM,SAAEa,GAEuB,MAA3BA,EAAOpB,KAAKiF,aAEZkC,EAAKlD,YAAa,EAElBkD,EAAKP,WAAY,EACjBO,EAAKN,cAAgB,cACrBM,EAAKhE,YAAc,6CACnBgE,EAAK9D,cAED4D,MAAQ,UAYnCjI,QAAQC,OAAQ,OACRQ,WAAY,gCAAkC,SAAU,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUyH,EAAGxH,EAAUgC,EAAOD,EAAc7B,EAASC,GAAQ,GAAAuH,GAAArH,KAGhLC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BD,GAAOK,KAAKC,MAAON,EAEnB,IAAM4B,GAAiBH,EAAaI,IACpC9B,MAAK8B,KAAOD,EAEZ/B,EAAMiC,eAEFF,eAAAA,EACAG,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,OAEXtB,KAAM,SAAEP,GAERoH,EAAKpF,eAAiBhC,EAEsC,IAAxDoH,EAAKpF,eAAeqF,eAAeV,UAAUrF,SAQrDvB,KAAKiH,WAAa,WAEdI,EAAKnD,YAAa,EAElBpE,EAAM2G,kBAEFzE,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgBwF,EAAKvF,KACrB7B,KAAMoH,EAAKpF,iBAEXzB,KAAM,SAAEa,GAEuB,MAA3BA,EAAOpB,KAAKiF,aAEZmC,EAAKnD,YAAa,EAElBmD,EAAKR,WAAY,EACjBQ,EAAKP,cAAgB,cACrBO,EAAKjE,YAAc,6CACnBiE,EAAK/D,cAED4D,MAAQ,UAYnCjI,QAAQC,OAAQ,OACRQ,WAAY,8BAAgC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUC,EAAUgC,EAAOD,EAAc7B,EAASC,GAAQ,GAAAyH,GAAAvH,KAE/J8B,EAAOJ,EAAaI,KAEtB7B,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BF,MAAK8B,KAAOJ,EAAaI,KAEzB7B,EAAOK,KAAKC,MAAON,GAEnBH,EAAMiC,eAEFC,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgBC,IAEhBtB,KAAM,SAAEP,GAERsH,EAAKnD,WAAanE,IAItBD,KAAKiH,WAAa,WAEdM,EAAKrD,YAAa,EAElBpE,EAAM2G,kBAEFzE,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgBC,EAChB7B,KAAMsH,EAAKnD,aAEX5D,KAAM,SAAEa,GAEuB,MAA3BA,EAAOpB,KAAKiF,aAEZqC,EAAKrD,YAAa,EAElBqD,EAAKV,WAAY,EACjBU,EAAKT,cAAgB,cACrBS,EAAKnE,YAAc,6CACnBmE,EAAKjE,cAED4D,MAAQ,UAYnCjI,QAAQC,OAAQ,OACRQ,WAAY,oCAAsC,WAAY,QAAS,eAAgB,UAAW,iBAAkB,SAAUC,EAAUgC,EAAOD,EAAc7B,EAASC,GAAQ,GAAA0H,GAAAxH,KAGvKC,GADeN,EAASO,IAAK,cACpBP,EAASO,IAAK,aAE3BD,GAAOK,KAAKC,MAAON,EAEnB,IAAM4B,GAAiBH,EAAaI,IACpC9B,MAAK8B,KAAOD,EAEZ/B,EAAMiC,eAEFF,eAAAA,EACAG,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,OAEXtB,KAAM,SAAEP,GAERuH,EAAKvF,eAAiBhC,EAElBuH,EAAKvF,eAAeK,mBAAmBmF,OAAOC,cAC9CF,EAAKvF,eAAeK,mBAAmBmF,OAAOC,YAAc,GAAIC,MAAMH,EAAKvF,eAAeK,mBAAmBmF,OAAOC,cAGpHF,EAAKvF,eAAeK,mBAAmBmF,OAAOG,gBAC9CJ,EAAKvF,eAAeK,mBAAmBmF,OAAOG,cAAgB,GAAID,MAAMH,EAAKvF,eAAeK,mBAAmBmF,OAAOG,gBAGtHJ,EAAKvF,eAAeK,mBAAmBuF,cAAcH,cACrDF,EAAKvF,eAAeK,mBAAmBuF,cAAcH,YAAc,GAAIC,MAAMH,EAAKvF,eAAeK,mBAAmBuF,cAAcH,cAGlIF,EAAKvF,eAAeK,mBAAmBuF,cAAcD,gBACrDJ,EAAKvF,eAAeK,mBAAmBuF,cAAcD,cAAgB,GAAID,MAAMH,EAAKvF,eAAeK,mBAAmBuF,cAAcD,kBAM5I5H,KAAKiH,WAAa,WAEdO,EAAKtD,YAAa,EAElBpE,EAAM2G,kBAEFzE,MAAO/B,EAAK+B,MACZF,KAAM7B,EAAK6B,KACXD,eAAgB2F,EAAK1F,KACrB7B,KAAMuH,EAAKvF,iBAEXzB,KAAM,SAAEa,GAEuB,MAA3BA,EAAOpB,KAAKiF,aAEZsC,EAAKtD,YAAa,EAElBsD,EAAKX,WAAY,EACjBW,EAAKV,cAAgB,cACrBU,EAAKpE,YAAc,6CACnBoE,EAAKlE,cAED4D,MAAQ","file":"app.min.js","sourcesContent":["angular\n    .module( 'app', [\n        'ui.router',\n        'ngCookies',\n        'ngLodash'\n    ]);\n\nangular\n    .module( 'app' );\n\nangular.module( 'app' )\n       .config( [ '$urlRouterProvider', '$stateProvider', ( $urlRouterProvider, $stateProvider ) => {\n\n           $urlRouterProvider.otherwise( '/' );\n\n           $stateProvider\n               .state( 'home', {\n\n                   url: '/',\n                   templateUrl: 'app/templates/homepage.html',\n                   controller: 'HomePageController'\n\n               })\n               .state( 'dashboard', {\n\n                   url: '/dashboard',\n                   templateUrl: 'app/templates/dashboard.html',\n                   controller: 'DashboardController'\n\n               })\n               .state( 'newConference', {\n\n                   url: '/conferences/new',\n                   templateUrl: 'app/templates/new-conference.html',\n                   controller: 'NewConferenceController'\n\n               })\n               .state( 'editConference', {\n\n                   url: '/conferences/:guid',\n                   templateUrl: 'app/templates/edit-conference.html',\n                   controller: 'EditConferenceController'\n\n               })\n               .state( 'registrationForm', {\n\n                   url: '/conferences/:guid/registration',\n                   templateUrl: 'app/templates/forms/registration.html',\n                   controller: 'RegistrationFormController'\n\n               })\n               .state( 'delegateInformationForm', {\n\n                   url: '/conferences/:guid/delegates',\n                   templateUrl: 'app/templates/forms/delegate-information.html',\n                   controller: 'DelegateInformationFormController'\n\n               })\n               .state( 'travelArrangementsForm', {\n\n                   url: '/conferences/:guid/travel',\n                   templateUrl: 'app/templates/forms/travel-arrangements.html',\n                   controller: 'TravelArrangementsFormController'\n\n               })\n               .state( 'gaCrisisForm', {\n\n                   url: '/conferences/:guid/ga',\n                   templateUrl: 'app/templates/forms/ga-crisis.html',\n                   controller: 'GaCrisisFormController'\n\n               });\n\n       }]);\n\nangular.module( 'app' )\n       .controller( 'BasePageController', [ '$cookies', '$state', '$window', 'RestApiService', function( $cookies, $state, $window, $rest ) {\n\n            const data = $cookies.get( 'loginData' );\n            this.showLogout = $cookies.get( 'isLoggedIn' ) && data;\n            this.Logout = () => {\n\n                const promise = $rest.Logout( JSON.parse( data ) );\n                promise.then( ( data ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } ).catch( ( err ) => {\n\n                    $cookies.remove( 'isLoggedIn' );\n                    $cookies.remove( 'loginData' );\n\n                } );\n\n                this.showLogout = false;\n                $window.location = \"/\";\n\n            };\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'DashboardController', [ 'RestApiService', '$cookies', '$state', function( $rest, $cookies, $state ) {\n\n           let isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( !isLoggedIn && !data ) {\n               return $state.go( 'home' );\n           }\n\n           data = JSON.parse( data );\n\n           let dataPromise = $rest.GetUser( data );\n           dataPromise.then( ( dataOut ) => {\n\n               this.data = dataOut;\n\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n           dataPromise = $rest.GetAllConferences( data );\n           dataPromise.then( ( dataIn ) => {\n\n               this.hasConferences = ( dataIn.length !== 0 );\n               this.conferences = {\n                   count: dataIn.length,\n                   data: dataIn\n               };\n\n           } ).catch( ( data ) => {\n\n               console.log( 'Error Encountered' );\n\n           } );\n\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'EditConferenceController', [ '$stateParams', '$cookies', '$http', '$state', '$window', 'RestApiService', function( $stateParams, $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               this.isAllDone = this.conferenceData.registration.isFormFilled && this.conferenceData.delegateInformation.isFormFilled && this.conferenceData.travelArrangements.isFormFilled && this.conferenceData.gaCrisis.isFormFilled;\n\n           } );\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'HomePageController', [ 'RestApiService', '$state', '$cookies', '$window', function( $restApi, $state, $cookies, $window ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' )\n               , data       = ( $cookies.get( 'loginData' ) );\n\n           if( isLoggedIn && data ) {\n               $state.go( 'dashboard' );\n           }\n\n           const self = this;\n           self.Login = () => {\n\n               const resultPromise = $restApi.Login( self.user );\n               resultPromise.then( ( dataLogin ) => {\n\n                   $cookies.put( 'loginData', JSON.stringify( dataLogin ) );\n                   $cookies.put( 'isLoggedIn', true );\n\n                   $window.location.reload();\n                   $state.go( 'dashboard' );\n\n               } ).catch( ( dataError ) => {\n\n                   if( dataError.loggedIn === false ) {\n\n                       self.hasMessage = true;\n                       self.messageText = dataError.message;\n                       self.messageClass = {\n                           red: true\n                       }\n\n                   }\n\n               } );\n\n           }\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'NewConferenceController', [ '$cookies', '$http', '$state', '$window', 'RestApiService', function( $cookies, $http, $state, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           const self = this;\n\n           data = JSON.parse( data );\n\n           this.countries = [\n\n               {\n\n                   code: 'IN',\n                   name: 'India'\n\n               },\n\n               {\n\n                   code: 'US',\n                   name: 'America'\n\n               }\n\n           ];\n\n           this.populateStateList = ( country ) => {\n\n               $rest.GetStates( country ).then( ( data ) => {\n\n                   this.states = data;\n\n               } );\n\n           };\n\n           this.cancel = () => {\n\n               $state.go( 'dashboard' );\n\n           };\n\n           this.NewConference = () => {\n\n               this.processing = true;\n\n               const dataObject = {\n\n                   token: data.token,\n                   guid: data.guid,\n                   registration: {\n\n                       name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                       address: {\n\n                           street: self.conference.registration.address.street,\n                           city: self.conference.registration.address.city,\n                           pin: self.conference.registration.address.pin,\n                           state: self.conference.registration.address.state,\n                           country: self.conference.registration.address.country,\n\n                       },\n\n                       facultyAdvisor: {\n\n                           name: self.conference.registration.facultyAdvisor.firstName + ' ' + self.conference.registration.facultyAdvisor.lastName,\n                           mobileNumber: self.conference.registration.facultyAdvisor.mobile,\n                           landlineNumber: self.conference.registration.facultyAdvisor.landline,\n                           email: self.conference.registration.facultyAdvisor.email\n\n                       }\n\n                   }\n\n               };\n\n               $rest.CreateConference( dataObject ).then( ( data ) => {\n\n                    if( data.data.statusCode === 200 ) {\n\n                        this.processing = false;\n                        $state.go( 'dashboard' );\n\n                    } else {\n\n                        this.isError = true;\n                        this.errorMessage = data.data.data.message;\n\n                    }\n\n               } ).catch( ( data ) => {\n\n                  this.isError = true;\n                  this.errorMessage = data.message;\n\n               } );\n\n           };\n\n       } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'CryptoService', [ function() {\n\n        return {\n\n            getSha512: function( data ) {\n\n                var shaObj = new jsSHA( \"SHA-512\", \"TEXT\" );\n                shaObj.update( data );\n                return shaObj.getHash( \"HEX\" );\n\n            }\n\n        };\n\n    } ] );\n\nangular\n    .module( 'app' )\n    .factory( 'RestApiService', [ '$http', 'CryptoService', '$q', ( $http, $cryptoService, $q ) => {\n\n        const apiUrl = 'http://api.base.dsmun.com:3345'\n\n        return {\n\n            Login( userObject ) {\n\n                const dataObject = {}\n                    , promise    = $q.defer();\n\n                dataObject.username = userObject.username;\n                dataObject.password = $cryptoService.getSha512( userObject.password );\n\n                $http.post( apiUrl + '/auth', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data.token ) {\n\n                        promise.resolve( {\n\n                            token: data.data.data.token,\n                            guid : data.data.data.guid,\n                            role : data.data.data.role\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            loggedIn: false\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        loggedIn: false\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetUser( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/users/${ data.guid }?token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetAllConferences( data ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences?guid=${ data.guid }&token=${ data.token }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetConference( dataIn ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/conferences/${ dataIn.conferenceGuid }?token=${ dataIn.token }&guid=${ dataIn.guid }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data[ 0 ] );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            Logout( dataIn ) {\n\n                const promise = $q.defer();\n\n                $http.post( apiUrl + '/deauth', {\n\n                    guid: dataIn.guid,\n                    token: dataIn.token,\n\n                } ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            statusCode: 200\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            GetStates( country ) {\n\n                const promise    = $q.defer();\n\n                $http.get( `${ apiUrl }/metadata/states/${ country }` ).then( ( data ) => {\n\n                    if( data.status === 200 && data.data.data ) {\n\n                        promise.resolve( data.data.data );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            CreateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: {\n\n                        registration: confUserObject.registration,\n\n                    }\n\n                };\n\n                $http.post( apiUrl + '/conferences', dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n            UpdateConference( confUserObject ) {\n\n                const promise = $q.defer();\n\n                const dataObject = {\n\n                    token: confUserObject.token,\n                    guid: confUserObject.guid,\n                    data: confUserObject.data\n\n                };\n\n                $http.put( apiUrl + '/conferences/' + confUserObject.conferenceGuid, dataObject ).then( ( data ) => {\n\n                    if( data.status === 200 ) {\n\n                        promise.resolve( {\n\n                            data: data.data,\n\n                        } );\n\n                    } else {\n\n                        promise.reject( {\n\n                            message: data.data.message,\n                            error: true\n\n                        } );\n\n                    }\n\n                } ).catch( ( data ) => {\n\n                    promise.reject( {\n\n                        message: data.data.message,\n                        error: true\n\n                    } );\n\n                } );\n\n                return promise.promise;\n\n            },\n\n        };\n\n    } ] );\n\nangular.module( 'app' )\n       .controller( 'DelegateInformationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.delegateInformation.delegates.length === 17 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 17.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.delegateInformation ) {\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.delegateInformation = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.delegateInformation.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'GaCrisisFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n           } );\n\n           this.AddDelegate = () => {\n\n               if( this.conferenceData.gaCrisis && this.conferenceData.gaCrisis.delegates.length === 5 ) {\n\n                   this.isMessage = true;\n                   this.messageHeader = \"Warning!\";\n                   this.messageText = \"You can not add any more delegates. The maximum number of delegates per delegation is 5.\";\n                   this.messageClass = {\n\n                       'yellow': true,\n\n                   };\n                   return false;\n\n               }\n\n               if( this.conferenceData.gaCrisis ) {\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               } else {\n\n                   this.conferenceData.gaCrisis = {\n                       delegates: []\n                   };\n\n                   this.conferenceData.gaCrisis.delegates.push( {\n\n                       name: 'Delegate Name'\n\n                   } );\n\n               }\n\n           };\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'MedicalHistoryFormController', [ 'lodash', '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( _, $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.medicalHistory.delegates.length === 0 ) {\n\n                   \n\n               }\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'RegistrationFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const guid = $stateParams.guid;\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           this.guid = $stateParams.guid;\n\n           data = JSON.parse( data );\n\n           $rest.GetConference( {\n\n               token: data.token,\n               guid: data.guid,\n               conferenceGuid: guid\n\n           } ).then( ( data ) => {\n\n               this.conference = data;\n\n           } );\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: guid,\n                   data: this.conference\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n\nangular.module( 'app' )\n       .controller( 'TravelArrangementsFormController', [ '$cookies', '$http', '$stateParams', '$window', 'RestApiService', function( $cookies, $http, $stateParams, $window, $rest ) {\n\n           const isLoggedIn = $cookies.get( 'isLoggedIn' );\n           let data = ( $cookies.get( 'loginData' ) );\n\n           data = JSON.parse( data );\n\n           const conferenceGuid = $stateParams.guid;\n           this.guid = conferenceGuid;\n\n           $rest.GetConference( {\n\n               conferenceGuid,\n               token: data.token,\n               guid: data.guid,\n\n           } ).then( ( data ) => {\n\n               this.conferenceData = data;\n\n               if( this.conferenceData.travelArrangements.onward.arrivalDate ) {\n                   this.conferenceData.travelArrangements.onward.arrivalDate = new Date( this.conferenceData.travelArrangements.onward.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.onward.departureDate ) {\n                   this.conferenceData.travelArrangements.onward.departureDate = new Date( this.conferenceData.travelArrangements.onward.departureDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.arrivalDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.arrivalDate = new Date( this.conferenceData.travelArrangements.returnJourney.arrivalDate );\n               }\n\n               if( this.conferenceData.travelArrangements.returnJourney.departureDate ) {\n                   this.conferenceData.travelArrangements.returnJourney.departureDate = new Date( this.conferenceData.travelArrangements.returnJourney.departureDate );\n               }\n\n           } );\n\n\n           this.UpdateForm = () => {\n\n               this.processing = true;\n\n               $rest.UpdateConference( {\n\n                   token: data.token,\n                   guid: data.guid,\n                   conferenceGuid: this.guid,\n                   data: this.conferenceData\n\n               } ).then( ( dataIn ) => {\n\n                   if( dataIn.data.statusCode === 200 ) {\n\n                       this.processing = false;\n\n                       this.isMessage = true;\n                       this.messageHeader = \"Successful!\";\n                       this.messageText = \"All the details were successfully updated!\";\n                       this.messageClass = {\n\n                           'blue': true,\n\n                       };\n\n                   }\n\n               } );\n\n           };\n\n       } ] );\n"]}